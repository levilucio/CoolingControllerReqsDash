package org.iets3.req.plugin.plugin;

/*Generated by MPS */

import com.mbeddr.mpsutil.contextactions.runtime.AbstractContextActionsDescriptor;
import com.mbeddr.mpsutil.contextactions.runtime.IContextActionsDescriptor;
import java.util.List;
import com.mbeddr.mpsutil.contextactions.runtime.IContextActionSource;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import com.mbeddr.mpsutil.contextactions.runtime.WrapperActionSource;
import com.mbeddr.mpsutil.contextactions.runtime.IntentionActionSource;
import javax.swing.Icon;
import com.mbeddr.mpsutil.contextactions.runtime.IIntention;
import com.mbeddr.mpsutil.contextactions.runtime.IContext;
import jetbrains.mps.ide.icons.IconManager;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import com.mbeddr.mpsutil.contextactions.runtime.IContextAction;
import com.mbeddr.mpsutil.contextactions.runtime.WrapperAction;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.Sequence;
import com.mbeddr.mpsutil.contextactions.runtime.GenericActionSource;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.core.behavior.INamedConcept__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import com.mbeddr.core.base.behavior.IVisibleElementProvider__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.iets3.req.core.behavior.IReqRefCtx__BehaviorDescriptor;
import com.mbeddr.mpsutil.contextactions.runtime.ContextActionId;
import com.mbeddr.mpsutil.contextactions.runtime.GenericAction;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.openapi.editor.EditorContext;
import com.mbeddr.doc.intentions.SurroundWithHelper;
import org.iets3.req.core.behavior.State__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class ContextActionsDescriptor extends AbstractContextActionsDescriptor implements IContextActionsDescriptor {

  private static ContextActionsDescriptor INSTANCE = new ContextActionsDescriptor();

  @Override
  public List<IContextActionSource> getActionSources() {
    List<IContextActionSource> result = ListSequence.fromList(new ArrayList<IContextActionSource>());

    ListSequence.fromList(result).addElement(new WrapperActionSource(new IntentionActionSource(new String[]{"org.iets3.req.core.intentions.AddChildRequirement_Intention"}) {
      @Override
      protected Icon getIcon(IIntention intention, IContext context) {
        return IconManager.getIcon(MetaAdapterFactory.getConcept(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x4a9d5259fc70a855L, "org.iets3.req.core.structure.IconDummyAddChildReq"));
      }
    }, new IntentionActionSource(new String[]{"org.iets3.req.core.intentions.AddSiblingRequirement_Intention"}) {
      @Override
      protected Icon getIcon(IIntention intention, IContext context) {
        return IconManager.getIcon(MetaAdapterFactory.getConcept(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x4a9d5259fc70a85fL, "org.iets3.req.core.structure.IconDummyAddSiblingReq"));
      }
    }, new IntentionActionSource(new String[]{"org.iets3.req.core.intentions.DeleteRequirement_Intention"}) {
      @Override
      protected Icon getIcon(IIntention intention, IContext context) {
        return IconManager.getIcon(MetaAdapterFactory.getConcept(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x4a9d5259fc70a869L, "org.iets3.req.core.structure.IconDummyDeleteReq"));
      }
    }) {
      @Override
      protected IContextAction wrap(IContextAction action) {
        return new WrapperAction(action) {
          @NotNull
          @Override
          public List<String> getFolders(IContext context) {
            return Sequence.fromIterable(Sequence.<String>singleton("Requirements Structure")).concat(ListSequence.fromList(super.getFolders(context))).toListSequence();
          }
        };
      }
    });
    ListSequence.fromList(result).addElement(new WrapperActionSource(new WrapperActionSource(new GenericActionSource<SNode>() {
      @Override
      public Icon getIcon(IContext context, SNode parameterObject) {
        return IconManager.getIconFor(parameterObject);
      }
      @Override
      public String getLabel(IContext context, SNode parameterObject) {
        return (String) INamedConcept__BehaviorDescriptor.getFqName_idhEwIO9y.invoke(parameterObject);
      }
      @Override
      public Iterable<SNode> queryParameterObjects(IContext context) {
        return SNodeOperations.ofConcept(IVisibleElementProvider__BehaviorDescriptor.visibleContentsOfType_id6clJcrJXo2_.invoke(SNodeOperations.getNodeAncestor(context.getSNode(), MetaAdapterFactory.getInterfaceConcept(0xd4280a54f6df4383L, 0xaa41d1b2bffa7eb1L, 0x6315bcc6eff580a3L, "com.mbeddr.core.base.structure.IVisibleElementProvider"), false, false), MetaAdapterFactory.getConcept(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x477d8ab2bc8195aeL, "org.iets3.req.core.structure.AbstractRequirement").getDeclarationNode()), MetaAdapterFactory.getConcept(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x477d8ab2bc8195aeL, "org.iets3.req.core.structure.AbstractRequirement"));
      }
      @Override
      public String getTooltip(IContext context, SNode parameterObject) {
        return SPropertyOperations.getString(parameterObject, MetaAdapterFactory.getProperty(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x477d8ab2bc8195aeL, 0x477d8ab2bc8195f3L, "title"));
      }
      @Override
      public void execute(IContext context, SNode parameterObject) {
        IReqRefCtx__BehaviorDescriptor.insertRefTo_id3wHxcnxC3Wx.invoke(SNodeOperations.getNodeAncestor(context.getSNode(), MetaAdapterFactory.getInterfaceConcept(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x382d84c5e1a03f05L, "org.iets3.req.core.structure.IReqRefCtx"), true, false), parameterObject);
      }
      @Override
      protected ContextActionId getActionSourceId() {
        return new ContextActionId("4048037625504686981");
      }
      @Override
      protected IContextAction createAction(final SNode parameterObject) {
        return new GenericAction(this, parameterObject) {

        };
      }
    }) {
      @Override
      protected IContextAction wrap(IContextAction action) {
        return new WrapperAction(action) {
          @NotNull
          @Override
          public List<String> getFolders(IContext context) {
            return Sequence.fromIterable(Sequence.<String>singleton("Requirements")).concat(ListSequence.fromList(super.getFolders(context))).toListSequence();
          }
        };
      }
    }) {
      @Override
      public boolean isApplicable(IContext context) {
        return (SNodeOperations.getNodeAncestor(context.getSNode(), MetaAdapterFactory.getInterfaceConcept(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x382d84c5e1a03f05L, "org.iets3.req.core.structure.IReqRefCtx"), true, false) != null);
      }
    });
    ListSequence.fromList(result).addElement(new WrapperActionSource(new WrapperActionSource(new WrapperActionSource(new GenericActionSource<SAbstractConcept>() {
      @Override
      public Icon getIcon(IContext context, SAbstractConcept parameterObject) {
        return IconManager.getIconForConceptFQName(parameterObject.getQualifiedName());
      }
      @Override
      public String getLabel(IContext context, SAbstractConcept parameterObject) {
        return SConceptOperations.conceptAlias(parameterObject) + " (" + SConceptOperations.shortDescription(parameterObject) + ")";
      }
      @Override
      public Iterable<SAbstractConcept> queryParameterObjects(IContext context) {
        return Helper.getValidDocContents(context.getModel());
      }
      @Override
      public String getTooltip(IContext context, SAbstractConcept parameterObject) {
        return SConceptOperations.shortDescription(parameterObject);
      }
      @Override
      public void execute(IContext context, SAbstractConcept parameterObject) {
        SNodeOperations.insertNextSiblingChild(Helper.docContent(context.getSNode()), SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(parameterObject)));
      }
      @Override
      protected ContextActionId getActionSourceId() {
        return new ContextActionId("6906000695315021024");
      }
      @Override
      protected IContextAction createAction(final SAbstractConcept parameterObject) {
        return new GenericAction(this, parameterObject) {

        };
      }
    }) {
      @Override
      protected IContextAction wrap(IContextAction action) {
        return new WrapperAction(action) {
          @NotNull
          @Override
          public List<String> getFolders(IContext context) {
            return Sequence.fromIterable(Sequence.<String>singleton("Insert Paragraph")).concat(ListSequence.fromList(super.getFolders(context))).toListSequence();
          }
        };
      }
    }) {
      @Override
      public boolean isApplicable(IContext context) {
        return Helper.isUnderDoc(context.getSNode());
      }
    }, new WrapperActionSource(new WrapperActionSource(new GenericActionSource<SConcept>() {
      @Override
      public String getLabel(IContext context, SConcept parameterObject) {
        return SConceptOperations.conceptAlias(parameterObject) + " (" + SConceptOperations.shortDescription(parameterObject) + ")";
      }
      @Override
      public Iterable<SConcept> queryParameterObjects(IContext context) {
        return ListSequence.fromList(SConceptOperations.getAllSubConcepts2(MetaAdapterFactory.getConcept(0x2374bc907e3741f1L, 0xa9c4c2e35194c36aL, 0x558f97d9712a5ce4L, "com.mbeddr.doc.structure.FormattedText"), context.getModel())).where(new IWhereFilter<SConcept>() {
          public boolean accept(SConcept cc) {
            return !(cc.isAbstract()) && !(isEmptyString(SConceptOperations.conceptAlias(cc)));
          }
        }).toListSequence();
      }
      @Override
      public String getTooltip(IContext context, SConcept parameterObject) {
        return SConceptOperations.shortDescription(parameterObject);
      }
      @Override
      public void execute(IContext context, SConcept parameterObject) {
        // wrap current word with the formatted text, if selection is valid 
        EditorContext ec = context.getEditorComponent().getEditorContext();
        if (SurroundWithHelper.isCorrectSelection(ec)) {
          SurroundWithHelper.performSurrounding(ec, ((SNode) SNodeOperations.asNode(parameterObject)));
          return;
        }
        // otherwise insert new word as next sibling 
        SNodeOperations.insertNextSiblingChild(context.getSNode(), SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(parameterObject)));
      }
      @Override
      protected ContextActionId getActionSourceId() {
        return new ContextActionId("6906000695315342132");
      }
      @Override
      protected IContextAction createAction(final SConcept parameterObject) {
        return new GenericAction(this, parameterObject) {

        };
      }
    }) {
      @Override
      protected IContextAction wrap(IContextAction action) {
        return new WrapperAction(action) {
          @NotNull
          @Override
          public List<String> getFolders(IContext context) {
            return Sequence.fromIterable(Sequence.<String>singleton("Formatting")).concat(ListSequence.fromList(super.getFolders(context))).toListSequence();
          }
        };
      }
    }) {
      @Override
      public boolean isApplicable(IContext context) {
        return SNodeOperations.isInstanceOf(context.getSNode(), MetaAdapterFactory.getConcept(0x92d2ea165a424fdfL, 0xa676c7604efe3504L, 0x237c8da86a9f2e0cL, "de.slisson.mps.richtext.structure.Word"));
      }
    }) {
      @Override
      protected IContextAction wrap(IContextAction action) {
        return new WrapperAction(action) {
          @NotNull
          @Override
          public List<String> getFolders(IContext context) {
            return Sequence.fromIterable(Sequence.<String>singleton("Documentation")).concat(ListSequence.fromList(super.getFolders(context))).toListSequence();
          }
        };
      }
    });
    ListSequence.fromList(result).addElement(new WrapperActionSource(new GenericActionSource<SNode>() {
      @Override
      public String getLabel(IContext context, SNode parameterObject) {
        return "Move to State " + parameterObject;
      }
      @Override
      public Iterable<SNode> queryParameterObjects(IContext context) {
        return (Iterable<SNode>) State__BehaviorDescriptor.nextStates_id7Ip2X68O2Sn.invoke(SLinkOperations.getTarget(SNodeOperations.getNodeAncestor(context.getSNode(), MetaAdapterFactory.getConcept(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x477d8ab2bc8195b9L, "org.iets3.req.core.structure.DefaultRequirement"), true, false), MetaAdapterFactory.getContainmentLink(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x477d8ab2bc8195b9L, 0x5463f52ab0dddfbL, "state")));
      }
      @Override
      public void execute(IContext context, SNode parameterObject) {
        SLinkOperations.setTarget(SNodeOperations.getNodeAncestor(context.getSNode(), MetaAdapterFactory.getConcept(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x477d8ab2bc8195b9L, "org.iets3.req.core.structure.DefaultRequirement"), true, false), MetaAdapterFactory.getContainmentLink(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x477d8ab2bc8195b9L, 0x5463f52ab0dddfbL, "state"), parameterObject);
      }
      @Override
      protected ContextActionId getActionSourceId() {
        return new ContextActionId("8906162732673348125");
      }
      @Override
      protected IContextAction createAction(final SNode parameterObject) {
        return new GenericAction(this, parameterObject) {

        };
      }
    }) {
      @Override
      protected IContextAction wrap(IContextAction action) {
        return new WrapperAction(action) {
          @NotNull
          @Override
          public List<String> getFolders(IContext context) {
            return Sequence.fromIterable(Sequence.<String>singleton("Workflow")).concat(ListSequence.fromList(super.getFolders(context))).toListSequence();
          }
        };
      }
    });
    ListSequence.fromList(result).addElement(new WrapperActionSource(new GenericActionSource<SConcept>() {
      @Override
      public String getLabel(IContext context, SConcept parameterObject) {
        return SConceptOperations.conceptAlias(parameterObject) + " (" + SConceptOperations.shortDescription(parameterObject) + ")";
      }
      @Override
      public Iterable<SConcept> queryParameterObjects(final IContext context) {
        return ListSequence.fromList(SConceptOperations.getAllSubConcepts2(MetaAdapterFactory.getConcept(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x477d8ab2bc895b1cL, "org.iets3.req.core.structure.Tag"), context.getModel())).where(new IWhereFilter<SConcept>() {
          public boolean accept(SConcept cc) {
            return !(cc.isAbstract());
          }
        }).where(new IWhereFilter<SConcept>() {
          public boolean accept(final SConcept cc) {
            return !(ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.getNodeAncestor(context.getSNode(), MetaAdapterFactory.getConcept(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x477d8ab2bc8195b9L, "org.iets3.req.core.structure.DefaultRequirement"), true, false), MetaAdapterFactory.getContainmentLink(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x477d8ab2bc8195b9L, 0x477d8ab2bc895b23L, "tags"))).any(new IWhereFilter<SNode>() {
              public boolean accept(SNode it) {
                return SNodeOperations.getConcept(it) == cc;
              }
            }));
          }
        });
      }
      @Override
      public void execute(IContext context, SConcept parameterObject) {
        SNode tag = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(parameterObject));
        ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.getNodeAncestor(context.getSNode(), MetaAdapterFactory.getConcept(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x477d8ab2bc8195b9L, "org.iets3.req.core.structure.DefaultRequirement"), true, false), MetaAdapterFactory.getContainmentLink(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x477d8ab2bc8195b9L, 0x477d8ab2bc895b23L, "tags"))).addElement(SNodeOperations.cast(tag, MetaAdapterFactory.getConcept(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x477d8ab2bc895b1cL, "org.iets3.req.core.structure.Tag")));
      }
      @Override
      protected ContextActionId getActionSourceId() {
        return new ContextActionId("8812464827223532844");
      }
      @Override
      protected IContextAction createAction(final SConcept parameterObject) {
        return new GenericAction(this, parameterObject) {

        };
      }
    }) {
      @Override
      protected IContextAction wrap(IContextAction action) {
        return new WrapperAction(action) {
          @NotNull
          @Override
          public List<String> getFolders(IContext context) {
            return Sequence.fromIterable(Sequence.<String>singleton("Tags")).concat(ListSequence.fromList(super.getFolders(context))).toListSequence();
          }
        };
      }
    });

    return result;
  }

  private static boolean isEmptyString(String str) {
    return str == null || str.length() == 0;
  }
}

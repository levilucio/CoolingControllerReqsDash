package org.iets3.flow.property.behavior;

/*Generated by MPS */

import jetbrains.mps.ide.modelchecker.platform.actions.SpecificChecker;
import java.util.List;
import jetbrains.mps.ide.findusages.model.SearchResult;
import jetbrains.mps.ide.modelchecker.platform.actions.ModelCheckerIssue;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Set;
import jetbrains.mps.errors.IErrorReporter;
import org.iets3.utility.behavior.CheckerUtility;
import jetbrains.mps.ide.modelchecker.platform.actions.ModelChecker;

public class ErrorFreeTablePropertyClass extends SpecificChecker {

  @Override
  public List<SearchResult<ModelCheckerIssue>> checkModel(SModel model, ProgressMonitor progressContext) {

    final List<SearchResult<ModelCheckerIssue>> results = ListSequence.fromList(new ArrayList<SearchResult<ModelCheckerIssue>>());

    if (ListSequence.fromList(SModelOperations.roots(model, MetaAdapterFactory.getConcept(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785cecd7dL, "org.iets3.table.coolingbehaviortable.structure.CoolingBehaviorTable"))).isNotEmpty()) {

      System.out.println("////////////////// TABLE HAS BEEN DEFINED");

      SNode table = ListSequence.fromList(SModelOperations.roots(model, MetaAdapterFactory.getConcept(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785cecd7dL, "org.iets3.table.coolingbehaviortable.structure.CoolingBehaviorTable"))).first();

      if (ListSequence.fromList(SLinkOperations.getChildren(table, MetaAdapterFactory.getContainmentLink(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785cecd7dL, 0x671fcf1785d25111L, "drow"))).count() != 0) {
        List<SNode> tabledescendants = SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(table), MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, "jetbrains.mps.lang.core.structure.BaseConcept"), false, new SAbstractConcept[]{});
        for (SNode descendant : ListSequence.fromList(tabledescendants)) {
          Set<IErrorReporter> checkconceptforInfo = CheckerUtility.CheckConceptNodesForPropertyErrors(descendant);
          if (checkconceptforInfo != null) {
            SpecificChecker.addIssue(results, ListSequence.fromList(SModelOperations.roots(model, MetaAdapterFactory.getConcept(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x20fc30679cdcee4aL, "org.iets3.flow.dashboard.structure.DashboardHintDisplayer"))).first(), "Some elements in the table have errors", ModelChecker.SEVERITY_ERROR, "FLOW language Custom Error", null);
          }
        }
      }
    } else {

      System.out.println("////////////////// TABLE HAS NOT BEEN DEFINED");


      SpecificChecker.addIssue(results, ListSequence.fromList(SModelOperations.roots(model, MetaAdapterFactory.getConcept(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x20fc30679cdcee4aL, "org.iets3.flow.dashboard.structure.DashboardHintDisplayer"))).first(), "No table has been created", ModelChecker.SEVERITY_ERROR, "FLOW language Custom Error", null);
    }

    return results;
  }
}

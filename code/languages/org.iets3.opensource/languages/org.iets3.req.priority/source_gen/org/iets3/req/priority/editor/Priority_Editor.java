package org.iets3.req.priority.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import org.iets3.core.base.editor.IETS3Styles_StyleSheet;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.nodeEditor.cells.EditorCell_Indent;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.nodeEditor.AbstractCellProvider;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import com.mbeddr.core.base.editor.ColoredVerticalBarCell;
import java.awt.Color;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import com.mbeddr.core.base.editor.VerticalWhitespaceCell;

public class Priority_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_pkvepg_a(editorContext, node);
  }
  private EditorCell createCollection_pkvepg_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_pkvepg_a");
    editorCell.setBig(true);
    editorCell.addEditorCell(this.createProperty_pkvepg_a0(editorContext, node));
    editorCell.addEditorCell(this.createIndentCell_pkvepg_b0(editorContext, node));
    editorCell.addEditorCell(this.createCollection_pkvepg_c0(editorContext, node));
    return editorCell;
  }
  private EditorCell createProperty_pkvepg_a0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("name");
    provider.setNoTargetText("<no name>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_name");
    Style style = new StyleImpl();
    {
      Style styleToPut = new StyleImpl();
      priority_StyleSheet.apply_text(styleToPut, editorCell);
      style.putAll(styleToPut, 0);
    }
    {
      Style styleToPut = new StyleImpl();
      IETS3Styles_StyleSheet.apply_iets3Bigger(styleToPut, editorCell);
      style.putAll(styleToPut, 0);
    }
    editorCell.getStyle().putAll(style);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, provider.getRoleAttributeKind(), editorCell);
    } else
    return editorCell;
  }
  private EditorCell createIndentCell_pkvepg_b0(EditorContext editorContext, SNode node) {
    EditorCell_Indent editorCell = new EditorCell_Indent(editorContext, node);
    return editorCell;
  }
  private EditorCell createCollection_pkvepg_c0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(editorContext, node);
    editorCell.setCellId("Collection_pkvepg_c0");
    editorCell.addEditorCell(this.createCollection_pkvepg_a2a(editorContext, node));
    editorCell.addEditorCell(this.createCollection_pkvepg_b2a(editorContext, node));
    editorCell.addEditorCell(this.createConstant_pkvepg_c2a(editorContext, node));
    editorCell.addEditorCell(this.createCustom_pkvepg_d2a(editorContext, node));
    return editorCell;
  }
  private EditorCell createCollection_pkvepg_a2a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_pkvepg_a2a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createCustom_pkvepg_a0c0(editorContext, node));
    editorCell.addEditorCell(this.createProperty_pkvepg_b0c0(editorContext, node));
    return editorCell;
  }
  private EditorCell createCustom_pkvepg_a0c0(final EditorContext editorContext, final SNode node) {
    AbstractCellProvider provider = new _FunctionTypes._return_P0_E0<ColoredVerticalBarCell>() {
      public ColoredVerticalBarCell invoke() {
        return new ColoredVerticalBarCell(node, Color.gray, -1, 2);
      }
    }.invoke();
    EditorCell editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("Custom_pkvepg_a0c0");
    return editorCell;
  }
  private EditorCell createProperty_pkvepg_b0c0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("weight");
    provider.setNoTargetText("<no weight>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_weight");
    Style style = new StyleImpl();
    {
      Style styleToPut = new StyleImpl();
      priority_StyleSheet.apply_weight(styleToPut, editorCell);
      style.putAll(styleToPut, 0);
    }
    editorCell.getStyle().putAll(style);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, provider.getRoleAttributeKind(), editorCell);
    } else
    return editorCell;
  }
  private EditorCell createCollection_pkvepg_b2a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_pkvepg_b2a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createCustom_pkvepg_a1c0(editorContext, node));
    editorCell.addEditorCell(this.createProperty_pkvepg_b1c0(editorContext, node));
    return editorCell;
  }
  private EditorCell createCustom_pkvepg_a1c0(final EditorContext editorContext, final SNode node) {
    AbstractCellProvider provider = new _FunctionTypes._return_P0_E0<ColoredVerticalBarCell>() {
      public ColoredVerticalBarCell invoke() {
        return new ColoredVerticalBarCell(node, Color.gray, -1, 2);
      }
    }.invoke();
    EditorCell editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("Custom_pkvepg_a1c0");
    return editorCell;
  }
  private EditorCell createProperty_pkvepg_b1c0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("description");
    provider.setNoTargetText("<no description>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_description");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, provider.getRoleAttributeKind(), editorCell);
    } else
    return editorCell;
  }
  private EditorCell createConstant_pkvepg_c2a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "");
    editorCell.setCellId("Constant_pkvepg_c2a");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCustom_pkvepg_d2a(final EditorContext editorContext, final SNode node) {
    AbstractCellProvider provider = new _FunctionTypes._return_P0_E0<VerticalWhitespaceCell>() {
      public VerticalWhitespaceCell invoke() {
        return new VerticalWhitespaceCell(node, 5);
      }
    }.invoke();
    EditorCell editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("Custom_pkvepg_d2a");
    return editorCell;
  }
}

package org.iets3.req.priority.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.concept.SConceptAdapterById;
import jetbrains.mps.smodel.adapter.structure.concept.SInterfaceConceptAdapterById;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.smodel.SNodePointer;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(2);
  /*package*/ final ConceptDescriptor myConceptPriority = createDescriptorForPriority();
  /*package*/ final ConceptDescriptor myConceptRootPriority = createDescriptorForRootPriority();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptPriority.getId(), 0);
    myIndexMap.put(myConceptRootPriority.getId(), 1);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptPriority, myConceptRootPriority);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptPriority;
      case 1:
        return myConceptRootPriority;
      default:
        throw new IllegalStateException();
    }
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    Integer res = null;
    if (c instanceof SConceptAdapterById) {
      res = myIndexMap.get(((SConceptAdapterById) c).getId());
    } else if (c instanceof SInterfaceConceptAdapterById) {
      res = myIndexMap.get(((SInterfaceConceptAdapterById) c).getId());
    }
    return (res == null ? -1 : res);
  }

  private static ConceptDescriptor createDescriptorForPriority() {
    return new ConceptDescriptorBuilder("org.iets3.req.priority.structure.Priority", MetaIdFactory.conceptId(0x7a870bb787b6411eL, 0x92c2eb3e9e856127L, 0x690245617af9805L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x58640d6762fe0f1dL, "description", new SNodePointer("r:50155ec7-8748-4b4a-8104-8760a416840f(org.iets3.req.priority.structure)", "6369230510702333725")), new ConceptDescriptorBuilder.Prop(0x690245617af980aL, "weight", new SNodePointer("r:50155ec7-8748-4b4a-8104-8760a416840f(org.iets3.req.priority.structure)", "472917913057073162"))).properties("description", "weight").alias("priority", "").sourceNode(new SNodePointer("r:50155ec7-8748-4b4a-8104-8760a416840f(org.iets3.req.priority.structure)", "472917913057073157")).create();
  }
  private static ConceptDescriptor createDescriptorForRootPriority() {
    return new ConceptDescriptorBuilder("org.iets3.req.priority.structure.RootPriority", MetaIdFactory.conceptId(0x7a870bb787b6411eL, 0x92c2eb3e9e856127L, 0x690245617af9800L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L)).childDescriptors(new ConceptDescriptorBuilder.Link(0x690245617af9803L, "priorityList", MetaIdFactory.conceptId(0x7a870bb787b6411eL, 0x92c2eb3e9e856127L, 0x690245617af9805L), true, true, false, new SNodePointer("r:50155ec7-8748-4b4a-8104-8760a416840f(org.iets3.req.priority.structure)", "472917913057073155"))).children(new String[]{"priorityList"}, new boolean[]{true}).rootable().alias("priorities", "").sourceNode(new SNodePointer("r:50155ec7-8748-4b4a-8104-8760a416840f(org.iets3.req.priority.structure)", "472917913057073152")).create();
  }
}

package org.iets3.req.core.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myState__BehaviorDescriptor = new State__BehaviorDescriptor();
  private final BHDescriptor myStateNew__BehaviorDescriptor = new StateNew__BehaviorDescriptor();
  private final BHDescriptor myIReqRefCtx__BehaviorDescriptor = new IReqRefCtx__BehaviorDescriptor();
  private final BHDescriptor myHeaderRequirement__BehaviorDescriptor = new HeaderRequirement__BehaviorDescriptor();
  private final BHDescriptor myRequirementsChunk__BehaviorDescriptor = new RequirementsChunk__BehaviorDescriptor();
  private final BHDescriptor myAbstractRequirement__BehaviorDescriptor = new AbstractRequirement__BehaviorDescriptor();
  private final BHDescriptor myDefaultRequirement__BehaviorDescriptor = new DefaultRequirement__BehaviorDescriptor();
  private final BHDescriptor myIReqContainer__BehaviorDescriptor = new IReqContainer__BehaviorDescriptor();
  private final BHDescriptor myIRequirementsRelation__BehaviorDescriptor = new IRequirementsRelation__BehaviorDescriptor();
  private final BHDescriptor myPlainReqRefWord__BehaviorDescriptor = new PlainReqRefWord__BehaviorDescriptor();
  private final BHDescriptor myStateAccepted__BehaviorDescriptor = new StateAccepted__BehaviorDescriptor();
  private final BHDescriptor myStateDone__BehaviorDescriptor = new StateDone__BehaviorDescriptor();

  public BehaviorAspectDescriptor() {
  }

  @Nullable
  public BHDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    {
      SAbstractConcept cncpt = concept;
      Integer preIndex = indices_846f5o_a0p.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return myAbstractRequirement__BehaviorDescriptor;
          }
          break;
        case 1:
          if (true) {
            return myDefaultRequirement__BehaviorDescriptor;
          }
          break;
        case 2:
          if (true) {
            return myHeaderRequirement__BehaviorDescriptor;
          }
          break;
        case 3:
          if (true) {
            return myIReqContainer__BehaviorDescriptor;
          }
          break;
        case 4:
          if (true) {
            return myIReqRefCtx__BehaviorDescriptor;
          }
          break;
        case 5:
          if (true) {
            return myIRequirementsRelation__BehaviorDescriptor;
          }
          break;
        case 6:
          if (true) {
            return myPlainReqRefWord__BehaviorDescriptor;
          }
          break;
        case 7:
          if (true) {
            return myRequirementsChunk__BehaviorDescriptor;
          }
          break;
        case 8:
          if (true) {
            return myState__BehaviorDescriptor;
          }
          break;
        case 9:
          if (true) {
            return myStateAccepted__BehaviorDescriptor;
          }
          break;
        case 10:
          if (true) {
            return myStateDone__BehaviorDescriptor;
          }
          break;
        case 11:
          if (true) {
            return myStateNew__BehaviorDescriptor;
          }
          break;
        default:
          // default 
      }
    }
    return null;
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_846f5o_a0p = buildConceptIndices(MetaAdapterFactory.getConcept(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x477d8ab2bc8195aeL, "org.iets3.req.core.structure.AbstractRequirement"), MetaAdapterFactory.getConcept(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x477d8ab2bc8195b9L, "org.iets3.req.core.structure.DefaultRequirement"), MetaAdapterFactory.getConcept(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x3ab49e14c25e58e6L, "org.iets3.req.core.structure.HeaderRequirement"), MetaAdapterFactory.getInterfaceConcept(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x477d8ab2bc87c94fL, "org.iets3.req.core.structure.IReqContainer"), MetaAdapterFactory.getInterfaceConcept(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x382d84c5e1a03f05L, "org.iets3.req.core.structure.IReqRefCtx"), MetaAdapterFactory.getInterfaceConcept(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x5fd70b0af6e37815L, "org.iets3.req.core.structure.IRequirementsRelation"), MetaAdapterFactory.getConcept(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x7a4c2a11e62715a7L, "org.iets3.req.core.structure.PlainReqRefWord"), MetaAdapterFactory.getConcept(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x477d8ab2bc81949cL, "org.iets3.req.core.structure.RequirementsChunk"), MetaAdapterFactory.getConcept(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x5463f52ab0ddac7L, "org.iets3.req.core.structure.State"), MetaAdapterFactory.getConcept(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x7b990bd188d02e2cL, "org.iets3.req.core.structure.StateAccepted"), MetaAdapterFactory.getConcept(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x7b990bd188d0c783L, "org.iets3.req.core.structure.StateDone"), MetaAdapterFactory.getConcept(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x5463f52ab0ddacbL, "org.iets3.req.core.structure.StateNew"));
}

package org.iets3.req.core.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionDescriptorBase;
import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.intentions.IntentionType;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.Collections;
import jetbrains.mps.intentions.IntentionExecutableBase;
import org.iets3.req.core.behavior.AbstractRequirement__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.intentions.IntentionDescriptor;

public final class AddChildHeader_Intention extends IntentionDescriptorBase implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public AddChildHeader_Intention() {
    super(MetaAdapterFactory.getConcept(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x477d8ab2bc8195aeL, "org.iets3.req.core.structure.AbstractRequirement"), IntentionType.NORMAL, true, new SNodePointer("r:533ea973-5538-450e-b933-d6335409cb90(org.iets3.req.core.intentions)", "5447651971676893234"));
  }
  @Override
  public String getPresentation() {
    return "AddChildHeader";
  }
  @Override
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    if (editorContext.getSelectedNode() != node && !(isVisibleInChild(node, editorContext.getSelectedNode(), editorContext))) {
      return false;
    }
    return true;
  }
  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x3ab49e14c25e58e6L, "org.iets3.req.core.structure.HeaderRequirement"));

  }
  private boolean isVisibleInChild(final SNode node, final SNode childNode, final EditorContext editorContext) {
    return SNodeOperations.isInstanceOf(childNode, MetaAdapterFactory.getConcept(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x3ab49e14c25e58e6L, "org.iets3.req.core.structure.HeaderRequirement"));
  }
  @Override
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new AddChildHeader_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends IntentionExecutableBase {
    public IntentionImplementation() {
    }
    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Add Child Header";
    }
    @Override
    public void execute(final SNode node, final EditorContext editorContext) {

      int newID = (int) AbstractRequirement__BehaviorDescriptor.nextReqID_id67kIGnNsPVW.invoke(SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x477d8ab2bc8195b9L, "org.iets3.req.core.structure.DefaultRequirement")), node);

      if (SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x477d8ab2bc8195b9L, "org.iets3.req.core.structure.DefaultRequirement"))) {
        SNode header = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x3ab49e14c25e58e6L, "org.iets3.req.core.structure.HeaderRequirement"));
        SPropertyOperations.set(header, MetaAdapterFactory.getProperty(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x477d8ab2bc8195aeL, 0xb54392f5f8273cdL, "uniqueID"), "" + (newID));
        SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x477d8ab2bc87c94fL, 0x477d8ab2bc87c9a5L, "requirements")).add(header);
      }

      if (SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x3ab49e14c25e58e6L, "org.iets3.req.core.structure.HeaderRequirement"))) {
        SNode r = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x3ab49e14c25e58e6L, "org.iets3.req.core.structure.HeaderRequirement"));
        SPropertyOperations.set(r, MetaAdapterFactory.getProperty(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x477d8ab2bc8195aeL, 0xb54392f5f8273cdL, "uniqueID"), "" + (newID));
        ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x477d8ab2bc87c94fL, 0x477d8ab2bc87c9a5L, "requirements"))).addElement(r);
      }

    }
    @Override
    public IntentionDescriptor getDescriptor() {
      return AddChildHeader_Intention.this;
    }
  }
}

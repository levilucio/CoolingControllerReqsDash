package org.iets3.req.core.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionDescriptorBase;
import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.intentions.IntentionType;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.Collections;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import jetbrains.mps.intentions.IntentionExecutableBase;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.intentions.IntentionDescriptor;

public final class AddToGlossary_Intention extends IntentionDescriptorBase implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public AddToGlossary_Intention() {
    super(MetaAdapterFactory.getInterfaceConcept(0x92d2ea165a424fdfL, 0xa676c7604efe3504L, 0x237c8da86a9e7aecL, "de.slisson.mps.richtext.structure.IWord"), IntentionType.NORMAL, false, new SNodePointer("r:533ea973-5538-450e-b933-d6335409cb90(org.iets3.req.core.intentions)", "8913201067422357666"));
  }
  @Override
  public String getPresentation() {
    return "AddToGlossary";
  }
  @Override
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }
  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return (SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(0x92d2ea165a424fdfL, 0xa676c7604efe3504L, 0x237c8da86a9f2e0cL, "de.slisson.mps.richtext.structure.Word")) || SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x7bb20d258b5f79a5L, "org.iets3.req.core.structure.NonMergeableWord"))) && SNodeOperations.isInstanceOf(SNodeOperations.getContainingRoot(node), MetaAdapterFactory.getConcept(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x477d8ab2bc81949cL, "org.iets3.req.core.structure.RequirementsChunk"));
  }
  @Override
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new AddToGlossary_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }
  protected static Logger LOG = LogManager.getLogger(AddToGlossary_Intention.class);
  /*package*/ final class IntentionImplementation extends IntentionExecutableBase {
    public IntentionImplementation() {
    }
    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Make into Glossary Term";
    }
    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      String text = "";
      {
        final SNode w = node;
        if (SNodeOperations.isInstanceOf(w, MetaAdapterFactory.getConcept(0x92d2ea165a424fdfL, 0xa676c7604efe3504L, 0x237c8da86a9f2e0cL, "de.slisson.mps.richtext.structure.Word"))) {
          text = SPropertyOperations.getString(w, MetaAdapterFactory.getProperty(0x92d2ea165a424fdfL, 0xa676c7604efe3504L, 0x237c8da86a9f2e0cL, 0x237c8da86a9f2e0eL, "escapedValue"));
        }
      }
      {
        final SNode w = node;
        if (SNodeOperations.isInstanceOf(w, MetaAdapterFactory.getConcept(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x7bb20d258b5f79a5L, "org.iets3.req.core.structure.NonMergeableWord"))) {
          if (LOG.isInfoEnabled()) {
            LOG.info("This is non  mergable word!");
          }
          text = SPropertyOperations.getString(w, MetaAdapterFactory.getProperty(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x7bb20d258b5f79a5L, 0x7bb20d258b60d4aeL, "escapedValue"));
        }
      }
      text = ((text == null ? null : text.trim()));
      SNode glossaryChunk = ListSequence.fromList(SModelOperations.nodesIncludingImported(SNodeOperations.getModel(node), MetaAdapterFactory.getConcept(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d74a56L, "org.iets3.glossary.structure.GlossaryChunk"))).first();
      SNode newTerm = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d74a57L, "org.iets3.glossary.structure.GlossaryTerm"));
      SPropertyOperations.set(newTerm, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), text);
      ListSequence.fromList(SLinkOperations.getChildren(glossaryChunk, MetaAdapterFactory.getContainmentLink(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d74a56L, 0x68caade118d74a58L, "terms"))).addElement(newTerm);
      SNode refWord = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d8d73cL, "org.iets3.glossary.structure.TermRefWord"));
      SLinkOperations.setTarget(refWord, MetaAdapterFactory.getReferenceLink(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d8d73cL, 0x68caade118d8d742L, "term"), newTerm);
      SNodeOperations.replaceWithAnother(node, refWord);
    }
    @Override
    public IntentionDescriptor getDescriptor() {
      return AddToGlossary_Intention.this;
    }
  }
}

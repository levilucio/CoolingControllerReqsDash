package org.iets3.req.core.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionDescriptorBase;
import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.intentions.IntentionType;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.Collections;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import jetbrains.mps.intentions.IntentionExecutableBase;
import java.util.List;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import com.mbeddr.doc.behavior.TextParagraph__BehaviorDescriptor;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.intentions.IntentionDescriptor;

public final class BuildNewRequirement_Intention extends IntentionDescriptorBase implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public BuildNewRequirement_Intention() {
    super(MetaAdapterFactory.getConcept(0x2374bc907e3741f1L, 0xa9c4c2e35194c36aL, 0x2e7fd03a4b7ccef2L, "com.mbeddr.doc.structure.TextParagraph"), IntentionType.NORMAL, true, new SNodePointer("r:533ea973-5538-450e-b933-d6335409cb90(org.iets3.req.core.intentions)", "3876684388440961479"));
  }
  @Override
  public String getPresentation() {
    return "BuildNewRequirement";
  }
  @Override
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }
  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return SNodeOperations.isInstanceOf(SNodeOperations.getContainingRoot(node), MetaAdapterFactory.getConcept(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x477d8ab2bc81949cL, "org.iets3.req.core.structure.RequirementsChunk"));
  }
  @Override
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new BuildNewRequirement_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }
  protected static Logger LOG = LogManager.getLogger(BuildNewRequirement_Intention.class);
  /*package*/ final class IntentionImplementation extends IntentionExecutableBase {
    public IntentionImplementation() {
    }
    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Build New Requirement";
    }
    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      if (LOG.isInfoEnabled()) {
        LOG.info("inside the paragraph");
      }

      int maxID;
      List<SNode> descendantsRequirement = SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(node), MetaAdapterFactory.getConcept(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x477d8ab2bc8195b9L, "org.iets3.req.core.structure.DefaultRequirement"), false, new SAbstractConcept[]{});
      List<SNode> descendantsHeader = SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(node), MetaAdapterFactory.getConcept(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x3ab49e14c25e58e6L, "org.iets3.req.core.structure.HeaderRequirement"), false, new SAbstractConcept[]{});
      maxID = descendantsHeader.size() + descendantsRequirement.size();


      SNode req = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x477d8ab2bc8195b9L, "org.iets3.req.core.structure.DefaultRequirement"));
      SPropertyOperations.set(req, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "");
      SPropertyOperations.set(req, MetaAdapterFactory.getProperty(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x477d8ab2bc8195aeL, 0x477d8ab2bc8195f3L, "title"), "");
      SPropertyOperations.set(req, MetaAdapterFactory.getProperty(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x477d8ab2bc8195aeL, 0xb54392f5f8273cdL, "uniqueID"), "" + (maxID + 1));


      SNode requiredDoc = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x477d8ab2bc883be3L, "org.iets3.req.core.structure.RequirementsDocSection"));
      SNode tp = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x2374bc907e3741f1L, 0xa9c4c2e35194c36aL, 0x2e7fd03a4b7ccef2L, "com.mbeddr.doc.structure.TextParagraph"));
      TextParagraph__BehaviorDescriptor.addString_id519ky_SnQaO.invoke(tp, "\r");
      ListSequence.fromList(SLinkOperations.getChildren(requiredDoc, MetaAdapterFactory.getContainmentLink(0x2374bc907e3741f1L, 0xa9c4c2e35194c36aL, 0x2e7fd03a4b7c6bf9L, 0x2e7fd03a4b7c6bfaL, "contents"))).addElement(SNodeOperations.copyNode(node));
      SLinkOperations.setTarget(req, MetaAdapterFactory.getContainmentLink(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x477d8ab2bc8195b9L, 0x477d8ab2bc883be0L, "doc"), requiredDoc);


      SNode ancestor = SNodeOperations.getNodeAncestor(node, MetaAdapterFactory.getConcept(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x477d8ab2bc8195b9L, "org.iets3.req.core.structure.DefaultRequirement"), false, false);
      SNodeOperations.insertNextSiblingChild(ancestor, req);
      if (LOG.isInfoEnabled()) {
        LOG.info("the node is " + SNodeOperations.isInstanceOf(SNodeOperations.getParent(SNodeOperations.getParent(SNodeOperations.getParent(node))), MetaAdapterFactory.getConcept(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x477d8ab2bc8195b9L, "org.iets3.req.core.structure.DefaultRequirement")));
      }
      if (LOG.isInfoEnabled()) {
        LOG.info("change!!");
      }

      // deleting node from  the parent 
      SNodeOperations.deleteNode(node);

    }
    @Override
    public IntentionDescriptor getDescriptor() {
      return BuildNewRequirement_Intention.this;
    }
  }
}

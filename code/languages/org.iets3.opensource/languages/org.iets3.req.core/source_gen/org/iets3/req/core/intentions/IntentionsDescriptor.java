package org.iets3.req.core.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionAspectBase;
import jetbrains.mps.intentions.IntentionFactory;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.HashMap;
import org.jetbrains.annotations.Nullable;
import java.util.Collection;
import org.jetbrains.annotations.NotNull;
import java.util.Arrays;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public final class IntentionsDescriptor extends IntentionAspectBase {
  private static final IntentionFactory[] EMPTY_ARRAY = new IntentionFactory[0];
  private Map<SAbstractConcept, IntentionFactory[]> myCached = new HashMap<SAbstractConcept, IntentionFactory[]>();

  public IntentionsDescriptor() {
  }

  @Nullable
  public Collection<IntentionFactory> getIntentions(@NotNull SAbstractConcept concept) {
    if (myCached.containsKey(concept)) {
      return Arrays.asList(myCached.get(concept));
    }

    IntentionFactory[] intentions = EMPTY_ARRAY;
    {
      SAbstractConcept cncpt = concept;
      Integer preIndex = indices_hphjzv_d0f.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            // Concept: AbstractParagraph 
            intentions = new IntentionFactory[1];
            intentions[0] = new AddrParagraphAfter_Intention();
          }
          break;
        case 1:
          if (true) {
            // Concept: AbstractRequirement 
            intentions = new IntentionFactory[5];
            intentions[0] = new AddChildRequirement_Intention();
            intentions[1] = new AddSiblingRequirement_Intention();
            intentions[2] = new DeleteRequirement_Intention();
            intentions[3] = new AddChildHeader_Intention();
            intentions[4] = new AddSiblingHeader_Intention();
          }
          break;
        case 2:
          if (true) {
            // Concept: DefaultRequirement 
            intentions = new IntentionFactory[1];
            intentions[0] = new FillWithText_Intention();
          }
          break;
        case 3:
          if (true) {
            // Concept: IWord 
            intentions = new IntentionFactory[2];
            intentions[0] = new AddToGlossary_Intention();
            intentions[1] = new AddToItemList_Intention();
          }
          break;
        case 4:
          if (true) {
            // Concept: TextParagraph 
            intentions = new IntentionFactory[1];
            intentions[0] = new BuildNewRequirement_Intention();
          }
          break;
        case 5:
          if (true) {
            // Concept: Word 
            intentions = new IntentionFactory[1];
            intentions[0] = new SplitSentenceIntoWords_Intention();
          }
          break;
        default:
          // default 
      }
    }
    myCached.put(concept, intentions);
    return Arrays.asList(intentions);
  }

  @NotNull
  @Override
  public Collection<IntentionFactory> getAllIntentions() {
    IntentionFactory[] rv = new IntentionFactory[11];
    rv[0] = new AddChildRequirement_Intention();
    rv[1] = new AddrParagraphAfter_Intention();
    rv[2] = new AddSiblingRequirement_Intention();
    rv[3] = new FillWithText_Intention();
    rv[4] = new DeleteRequirement_Intention();
    rv[5] = new AddToGlossary_Intention();
    rv[6] = new SplitSentenceIntoWords_Intention();
    rv[7] = new AddChildHeader_Intention();
    rv[8] = new BuildNewRequirement_Intention();
    rv[9] = new AddToItemList_Intention();
    rv[10] = new AddSiblingHeader_Intention();
    return Arrays.asList(rv);
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_hphjzv_d0f = buildConceptIndices(MetaAdapterFactory.getConcept(0x2374bc907e3741f1L, 0xa9c4c2e35194c36aL, 0x2e7fd03a4b7cceefL, "com.mbeddr.doc.structure.AbstractParagraph"), MetaAdapterFactory.getConcept(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x477d8ab2bc8195aeL, "org.iets3.req.core.structure.AbstractRequirement"), MetaAdapterFactory.getConcept(0xa3c6f64241b744cbL, 0x951b463b8427a245L, 0x477d8ab2bc8195b9L, "org.iets3.req.core.structure.DefaultRequirement"), MetaAdapterFactory.getInterfaceConcept(0x92d2ea165a424fdfL, 0xa676c7604efe3504L, 0x237c8da86a9e7aecL, "de.slisson.mps.richtext.structure.IWord"), MetaAdapterFactory.getConcept(0x2374bc907e3741f1L, 0xa9c4c2e35194c36aL, 0x2e7fd03a4b7ccef2L, "com.mbeddr.doc.structure.TextParagraph"), MetaAdapterFactory.getConcept(0x92d2ea165a424fdfL, 0xa676c7604efe3504L, 0x237c8da86a9f2e0cL, "de.slisson.mps.richtext.structure.Word"));
}

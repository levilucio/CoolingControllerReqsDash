package org.iets3.req.core.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbstractRequirement = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0a).create();
  private final ConceptPresentation props_CCTag = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DefaultRequirement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_HeaderRequirement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IReqContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IReqContent = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IReqDocContent = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IReqRefCtx = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IRequirementsRelation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IconDummyAddChildReq = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0j).create();
  private final ConceptPresentation props_IconDummyAddSiblingReq = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0k).create();
  private final ConceptPresentation props_IconDummyDeleteReq = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0l).create();
  private final ConceptPresentation props_Kind = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_KindFunctional = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_KindNonFunctional = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NonMergeableWord = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PlainReqRefWord = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PriorityTag = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RelKindConflicts = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RelTag = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RelationKind = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReqRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReqRelWord = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RequirementsChunk = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0x).create();
  private final ConceptPresentation props_RequirementsDocSection = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_State = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StateAccepted = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StateDone = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StateNew = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Tag = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_AbstractRequirement;
      case 1:
        return props_CCTag;
      case 2:
        return props_DefaultRequirement;
      case 3:
        return props_HeaderRequirement;
      case 4:
        return props_IReqContainer;
      case 5:
        return props_IReqContent;
      case 6:
        return props_IReqDocContent;
      case 7:
        return props_IReqRefCtx;
      case 8:
        return props_IRequirementsRelation;
      case 9:
        return props_IconDummyAddChildReq;
      case 10:
        return props_IconDummyAddSiblingReq;
      case 11:
        return props_IconDummyDeleteReq;
      case 12:
        return props_Kind;
      case 13:
        return props_KindFunctional;
      case 14:
        return props_KindNonFunctional;
      case 15:
        return props_NonMergeableWord;
      case 16:
        return props_PlainReqRefWord;
      case 17:
        return props_PriorityTag;
      case 18:
        return props_RelKindConflicts;
      case 19:
        return props_RelTag;
      case 20:
        return props_RelationKind;
      case 21:
        return props_ReqRef;
      case 22:
        return props_ReqRelWord;
      case 23:
        return props_RequirementsChunk;
      case 24:
        return props_RequirementsDocSection;
      case 25:
        return props_State;
      case 26:
        return props_StateAccepted;
      case 27:
        return props_StateDone;
      case 28:
        return props_StateNew;
      case 29:
        return props_Tag;
    }
    throw new IllegalStateException("Unknown concept " + c);
  }
}

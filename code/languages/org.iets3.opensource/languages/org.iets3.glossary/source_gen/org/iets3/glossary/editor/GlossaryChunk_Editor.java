package org.iets3.glossary.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import org.iets3.core.base.editor.IETS3Styles_StyleSheet;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.nodeEditor.cells.EditorCell_Component;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import javax.swing.JComponent;
import javax.swing.JCheckBox;
import java.awt.event.ItemListener;
import java.awt.event.ItemEvent;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.runtime.ConstraintsDescriptor;
import jetbrains.mps.smodel.language.ConceptRegistry;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.Comparator;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.apache.log4j.Level;
import jetbrains.mps.nodeEditor.AbstractCellProvider;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import com.mbeddr.core.base.editor.HorizLineCell;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.nodeEditor.cellProviders.AbstractCellListHandler;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Vertical;
import jetbrains.mps.lang.editor.cellProviders.RefNodeListHandler;
import jetbrains.mps.smodel.action.NodeFactoryManager;
import jetbrains.mps.openapi.editor.menus.transformation.SNodeLocation;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.nodeEditor.cellActions.CellAction_DeleteNode;
import jetbrains.mps.openapi.editor.cells.DefaultSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.OldNewCompositeSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.SChildSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.DefaultChildSubstituteInfo;

public class GlossaryChunk_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_jpgjni_a(editorContext, node);
  }
  private EditorCell createCollection_jpgjni_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(editorContext, node);
    editorCell.setCellId("Collection_jpgjni_a");
    editorCell.setBig(true);
    editorCell.addEditorCell(this.createCollection_jpgjni_a0(editorContext, node));
    editorCell.addEditorCell(this.createJComponent_jpgjni_b0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_jpgjni_c0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_jpgjni_d0(editorContext, node));
    editorCell.addEditorCell(this.createCustom_jpgjni_e0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_jpgjni_f0(editorContext, node));
    editorCell.addEditorCell(this.createRefNodeList_jpgjni_g0(editorContext, node));
    return editorCell;
  }
  private EditorCell createCollection_jpgjni_a0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_jpgjni_a0");
    Style style = new StyleImpl();
    {
      Style styleToPut = new StyleImpl();
      IETS3Styles_StyleSheet.apply_iets3ChunkHeader(styleToPut, editorCell);
      style.putAll(styleToPut, 0);
    }
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createConstant_jpgjni_a0a(editorContext, node));
    editorCell.addEditorCell(this.createProperty_jpgjni_b0a(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_jpgjni_a0a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "glossary");
    editorCell.setCellId("Constant_jpgjni_a0a");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createProperty_jpgjni_b0a(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("name");
    provider.setNoTargetText("<no name>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_name");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, provider.getRoleAttributeKind(), editorCell);
    } else
    return editorCell;
  }
  private EditorCell createJComponent_jpgjni_b0(EditorContext editorContext, SNode node) {
    EditorCell editorCell = EditorCell_Component.createComponentCell(editorContext, node, GlossaryChunk_Editor._QueryFunction_JComponent_jpgjni_a1a(node, editorContext), "_jpgjni_b0");
    editorCell.setCellId("JComponent_jpgjni_b0");
    return editorCell;
  }
  protected static Logger LOG = LogManager.getLogger(GlossaryChunk_Editor.class);
  private static JComponent _QueryFunction_JComponent_jpgjni_a1a(final SNode node, final EditorContext editorContext) {
    final JCheckBox checkBox = new JCheckBox();
    checkBox.addItemListener(new ItemListener() {
      public void itemStateChanged(ItemEvent p0) {
        if (p0.getStateChange() == ItemEvent.SELECTED) {
          if (LOG.isInfoEnabled()) {
            LOG.info("checkbox is selected");
          }

          // test code to check constarint checker 

          SConcept concept = SNodeOperations.getConcept(node);
          ConstraintsDescriptor constraintDescriptor = ConceptRegistry.getInstance().getConstraintsDescriptor(concept);




          editorContext.getRepository().getModelAccess().executeCommand(new Runnable() {
            public void run() {
              if (LOG.isInfoEnabled()) {
                LOG.info("inside run");
              }


              if (LOG.isInfoEnabled()) {
                LOG.info("unsorted is empty");
              }
              List<SNode> terms = SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d74a56L, 0x68caade118d74a58L, "terms"));




              Iterable<SNode> sorted = ListSequence.fromList(terms).sort(new Comparator<SNode>() {
                public int compare(SNode a, SNode b) {
                  return SPropertyOperations.getString(a, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")).compareToIgnoreCase(SPropertyOperations.getString(b, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")));
                }
              }, true);

              for (SNode term : ListSequence.fromList(terms)) {
                if (LOG.isInfoEnabled()) {
                  LOG.info("the current name is " + SPropertyOperations.getString(term, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")));
                }
              }

              ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d74a56L, 0x68caade118d74a58L, "terms"))).clear();

              ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d74a56L, 0x68caade118d74a58L, "terms"))).addSequence(Sequence.fromIterable(sorted));


            }
          });
        }
        if (p0.getStateChange() == ItemEvent.DESELECTED) {
          if (LOG.isEnabledFor(Level.ERROR)) {
            LOG.error("deselected!");
          }
        }
      }
    });
    return checkBox;
  }
  private EditorCell createConstant_jpgjni_c0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "select for alphabetical sorting");
    editorCell.setCellId("Constant_jpgjni_c0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_jpgjni_d0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "");
    editorCell.setCellId("Constant_jpgjni_d0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCustom_jpgjni_e0(final EditorContext editorContext, final SNode node) {
    AbstractCellProvider provider = new _FunctionTypes._return_P0_E0<HorizLineCell>() {
      public HorizLineCell invoke() {
        return new HorizLineCell(node);
      }
    }.invoke();
    EditorCell editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("Custom_jpgjni_e0");
    return editorCell;
  }
  private EditorCell createConstant_jpgjni_f0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "");
    editorCell.setCellId("Constant_jpgjni_f0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.EDITABLE, 0, false);
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefNodeList_jpgjni_g0(EditorContext editorContext, SNode node) {
    AbstractCellListHandler handler = new GlossaryChunk_Editor.termsListHandler_jpgjni_g0(node, "terms", editorContext);
    EditorCell_Collection editorCell = handler.createCells(editorContext, new CellLayout_Vertical(), false);
    editorCell.setCellId("refNodeList_terms");
    editorCell.setGridLayout(true);
    editorCell.setRole(handler.getElementRole());
    return editorCell;
  }
  private static class termsListHandler_jpgjni_g0 extends RefNodeListHandler {
    public termsListHandler_jpgjni_g0(SNode ownerNode, String childRole, EditorContext context) {
      super(ownerNode, childRole, context, false);
    }
    public SNode createNodeToInsert(EditorContext editorContext) {
      SNode listOwner = super.getOwner();
      return NodeFactoryManager.createNode(listOwner, editorContext, super.getElementRole());
    }
    public EditorCell createNodeCell(EditorContext editorContext, SNode elementNode) {
      editorContext.getCellFactory().pushCellContext();
      editorContext.getCellFactory().setNodeLocation(new SNodeLocation.FromNode(elementNode));
      try {
        EditorCell elementCell = super.createNodeCell(editorContext, elementNode);
        this.installElementCellActions(this.getOwner(), elementNode, elementCell, editorContext);
        return elementCell;
      } finally {
        editorContext.getCellFactory().popCellContext();
      }
    }
    protected boolean isCompatibilityMode() {
      return false;
    }
    public EditorCell createEmptyCell(EditorContext editorContext) {
      editorContext.getCellFactory().pushCellContext();
      editorContext.getCellFactory().setNodeLocation(new SNodeLocation.FromParentAndLink(termsListHandler_jpgjni_g0.this.getOwner(), MetaAdapterFactory.getContainmentLink(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d74a56L, 0x68caade118d74a58L, "terms")));
      try {
        EditorCell emptyCell = null;
        emptyCell = super.createEmptyCell(editorContext);
        this.installElementCellActions(super.getOwner(), null, emptyCell, editorContext);
        return emptyCell;
      } finally {
        editorContext.getCellFactory().popCellContext();
      }
    }
    public void installElementCellActions(SNode listOwner, SNode elementNode, EditorCell elementCell, EditorContext editorContext) {
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET) == null) {
        elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET, AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET);
        if (elementNode != null) {
          elementCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(elementNode, CellAction_DeleteNode.DeleteDirection.FORWARD));
          elementCell.setAction(CellActionType.BACKSPACE, new CellAction_DeleteNode(elementNode, CellAction_DeleteNode.DeleteDirection.BACKWARD));
        }
        if (elementCell.getSubstituteInfo() == null || elementCell.getSubstituteInfo() instanceof DefaultSubstituteInfo) {
          elementCell.setSubstituteInfo(new OldNewCompositeSubstituteInfo(myEditorContext, new SChildSubstituteInfo(elementCell, myOwnerNode, MetaAdapterFactory.getContainmentLink(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d74a56L, 0x68caade118d74a58L, "terms"), elementNode), new DefaultChildSubstituteInfo(myOwnerNode, elementNode, super.getLinkDeclaration(), myEditorContext)));
        }
      }
    }
  }
}

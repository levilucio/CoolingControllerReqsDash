package org.iets3.glossary.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import de.slisson.mps.richtext.behavior.Word__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;

public final class FindGlossaryRefAssQuery__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118e23efdL, "org.iets3.glossary.structure.FindGlossaryRefAssQuery");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<List<SNode>> runQuery_id7hIyKqbFNeu = new SMethodBuilder<List<SNode>>(new SJavaCompoundTypeImpl((Class<List<SNode>>) ((Class) Object.class))).name("runQuery").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("7hIyKqbFNeu").registry(REGISTRY).build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(runQuery_id7hIyKqbFNeu);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static List<SNode> runQuery_id7hIyKqbFNeu(@NotNull SNode __thisNode__) {
    List<SNode> result = new ArrayList<SNode>();
    List<SNode> terms = SModelOperations.nodesIncludingImported(SNodeOperations.getModel(__thisNode__), MetaAdapterFactory.getConcept(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d74a57L, "org.iets3.glossary.structure.GlossaryTerm"));
    List<SNode> words = SModelOperations.nodesIncludingImported(SNodeOperations.getModel(__thisNode__), MetaAdapterFactory.getConcept(0x92d2ea165a424fdfL, 0xa676c7604efe3504L, 0x237c8da86a9f2e0cL, "de.slisson.mps.richtext.structure.Word"));
    for (SNode w : ListSequence.fromList(words)) {
      String text = Word__BehaviorDescriptor.getText_idehGfXvI_DB.invoke(w);
      for (SNode term : ListSequence.fromList(terms)) {
        int pos = text.indexOf(SPropertyOperations.getString(term, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")));
        if (pos >= 0) {
          ListSequence.fromList(result).addElement(createFoundWordAssResult_2hj50n_a0a0a1a1a3a0(pos, term, w));
        }
        for (SNode alias : Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(term, MetaAdapterFactory.getContainmentLink(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d74a57L, 0x68caade118d895ceL, "attrs")), MetaAdapterFactory.getConcept(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x5590f4c1f3fcfd2L, "org.iets3.glossary.structure.AliasAttribute")))) {
          String t = SPropertyOperations.getString(alias, MetaAdapterFactory.getProperty(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x5590f4c1f3fcfd2L, 0x5590f4c1f3fcfd3L, "aliasText"));
          int aliasPos = text.indexOf(t);
          if (aliasPos >= 0) {
            ListSequence.fromList(result).addElement(createFoundWordAssResult_2hj50n_a0a0a2a2a1a3a0(aliasPos, term, t, w));

          }
        }

      }
    }
    return result;
  }

  /*package*/ FindGlossaryRefAssQuery__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((List<SNode>) runQuery_id7hIyKqbFNeu(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
  private static SNode createFoundWordAssResult_2hj50n_a0a0a1a1a3a0(Object p0, Object p1, Object p2) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode n1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118e2528cL, "org.iets3.glossary.structure.FoundWordAssResult"), null, null, false);
    n1.setProperty(MetaAdapterFactory.getProperty(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118e2528cL, 0x68caade118e252e3L, "position"), p0 + "");
    n1.setReferenceTarget(MetaAdapterFactory.getReferenceLink(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118e2528cL, 0x68caade118e26f6bL, "term"), (SNode) p1);
    n1.setReferenceTarget(MetaAdapterFactory.getReferenceLink(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118e2528cL, 0x68caade118e252e1L, "word"), (SNode) p2);
    return n1;
  }
  private static SNode createFoundWordAssResult_2hj50n_a0a0a2a2a1a3a0(Object p0, Object p1, Object p2, Object p3) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode n1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118e2528cL, "org.iets3.glossary.structure.FoundWordAssResult"), null, null, false);
    n1.setProperty(MetaAdapterFactory.getProperty(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118e2528cL, 0x68caade118e252e3L, "position"), p0 + "");
    n1.setReferenceTarget(MetaAdapterFactory.getReferenceLink(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118e2528cL, 0x68caade118e26f6bL, "term"), (SNode) p1);
    n1.setProperty(MetaAdapterFactory.getProperty(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118e2528cL, 0x5590f4c1f40859dL, "foundAlias"), p2 + "");
    n1.setReferenceTarget(MetaAdapterFactory.getReferenceLink(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118e2528cL, 0x68caade118e252e1L, "word"), (SNode) p3);
    return n1;
  }
}

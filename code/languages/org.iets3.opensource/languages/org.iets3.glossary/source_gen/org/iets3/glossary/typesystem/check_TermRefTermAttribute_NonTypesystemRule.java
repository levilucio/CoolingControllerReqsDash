package org.iets3.glossary.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import org.iets3.glossary.behavior.TermRefTermAttribute__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.errors.BaseQuickFixProvider;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class check_TermRefTermAttribute_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_TermRefTermAttribute_NonTypesystemRule() {
  }
  public void applyRule(final SNode ta, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if ((boolean) TermRefTermAttribute__BehaviorDescriptor.isBidirectional_id6zaFu4oSd9t.invoke(ta)) {
      SNode other = SLinkOperations.getTarget(ta, MetaAdapterFactory.getReferenceLink(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118e05b79L, 0x68caade118e05b7aL, "term"));
      final SNode currentTerm = SNodeOperations.cast(SNodeOperations.getParent(ta), MetaAdapterFactory.getConcept(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d74a57L, "org.iets3.glossary.structure.GlossaryTerm"));
      if (!(Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(other, MetaAdapterFactory.getContainmentLink(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d74a57L, 0x68caade118d895ceL, "attrs")), MetaAdapterFactory.getConcept(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118e05b79L, "org.iets3.glossary.structure.TermRefTermAttribute"))).any(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SLinkOperations.getTarget(it, MetaAdapterFactory.getReferenceLink(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118e05b79L, 0x68caade118e05b7aL, "term")) == currentTerm && SNodeOperations.getConcept(it) == SNodeOperations.getConcept(ta);
        }
      }))) {
        {
          MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportWarning(ta, "There should be " + SConceptOperations.conceptAlias(SNodeOperations.getConcept(ta)) + " back reference in " + SPropertyOperations.getString(other, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")), "r:4478be3d-ebce-4458-9928-521ecca4fead(org.iets3.glossary.typesystem)", "7551038907536716005", null, errorTarget);
          {
            BaseQuickFixProvider intentionProvider = new BaseQuickFixProvider("org.iets3.glossary.typesystem.addBackReference_QuickFix", false);
            intentionProvider.putArgument("theOneThatExists", ta);
            intentionProvider.putArgument("theOneThatMissesIt", other);
            _reporter_2309309498.addIntentionProvider(intentionProvider);
          }
        }
        {
          MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportWarning(other, "There should be an attribute of type " + SConceptOperations.conceptAlias(SNodeOperations.getConcept(ta)) + " that points to " + SPropertyOperations.getString(currentTerm, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")), "r:4478be3d-ebce-4458-9928-521ecca4fead(org.iets3.glossary.typesystem)", "7551038907536717098", null, errorTarget);
          {
            BaseQuickFixProvider intentionProvider = new BaseQuickFixProvider("org.iets3.glossary.typesystem.addBackReference_QuickFix", false);
            intentionProvider.putArgument("theOneThatExists", ta);
            intentionProvider.putArgument("theOneThatMissesIt", other);
            _reporter_2309309498.addIntentionProvider(intentionProvider);
          }
        }
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return MetaAdapterFactory.getConcept(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118e05b79L, "org.iets3.glossary.structure.TermRefTermAttribute");
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }
}

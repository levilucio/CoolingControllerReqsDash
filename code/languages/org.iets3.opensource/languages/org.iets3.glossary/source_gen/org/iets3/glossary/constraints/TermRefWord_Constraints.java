package org.iets3.glossary.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseReferenceScopeProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;

public class TermRefWord_Constraints extends BaseConstraintsDescriptor {
  public TermRefWord_Constraints() {
    super(MetaAdapterFactory.getConcept(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d8d73cL, "org.iets3.glossary.structure.TermRefWord"));
  }

  @Override
  protected Map<SReferenceLink, ReferenceConstraintsDescriptor> getSpecifiedReferences() {
    Map<SReferenceLink, ReferenceConstraintsDescriptor> references = new HashMap<SReferenceLink, ReferenceConstraintsDescriptor>();
    references.put(MetaAdapterFactory.getReferenceLink(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d8d73cL, 0x68caade118d8d742L, "term"), new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d8d73cL, 0x68caade118d8d742L), this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }
      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseReferenceScopeProvider() {
          @Override
          public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            return SModelOperations.nodesIncludingImported(_context.getModel(), MetaAdapterFactory.getConcept(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d74a57L, "org.iets3.glossary.structure.GlossaryTerm"));
          }
          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return breakingNode_gdsvhw_a0a1a0a0a1a0b0a1a2;
          }
        };
      }
    });
    return references;
  }
  private static SNodePointer breakingNode_gdsvhw_a0a1a0a0a1a0b0a1a2 = new SNodePointer("r:5bb4335b-fefd-4525-8504-bcf4e8951186(org.iets3.glossary.constraints)", "7551038907536168802");
}

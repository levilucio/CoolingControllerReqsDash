package org.iets3.glossary.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AliasAttribute = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AlternateText = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FindGlossaryRefAssQuery = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FoundWordAssResult = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GlossaryChunk = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0e).create();
  private final ConceptPresentation props_GlossaryDocSection = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GlossaryTerm = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SynonymAttribute = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TermAttribute = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TermRefTermAttribute = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TermRefWord = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_AliasAttribute;
      case 1:
        return props_AlternateText;
      case 2:
        return props_FindGlossaryRefAssQuery;
      case 3:
        return props_FoundWordAssResult;
      case 4:
        return props_GlossaryChunk;
      case 5:
        return props_GlossaryDocSection;
      case 6:
        return props_GlossaryTerm;
      case 7:
        return props_SynonymAttribute;
      case 8:
        return props_TermAttribute;
      case 9:
        return props_TermRefTermAttribute;
      case 10:
        return props_TermRefWord;
    }
    throw new IllegalStateException("Unknown concept " + c);
  }
}

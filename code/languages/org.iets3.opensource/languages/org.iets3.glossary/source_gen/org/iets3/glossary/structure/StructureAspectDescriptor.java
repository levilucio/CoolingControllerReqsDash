package org.iets3.glossary.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.concept.SConceptAdapterById;
import jetbrains.mps.smodel.adapter.structure.concept.SInterfaceConceptAdapterById;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.smodel.SNodePointer;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(11);
  /*package*/ final ConceptDescriptor myConceptAliasAttribute = createDescriptorForAliasAttribute();
  /*package*/ final ConceptDescriptor myConceptAlternateText = createDescriptorForAlternateText();
  /*package*/ final ConceptDescriptor myConceptFindGlossaryRefAssQuery = createDescriptorForFindGlossaryRefAssQuery();
  /*package*/ final ConceptDescriptor myConceptFoundWordAssResult = createDescriptorForFoundWordAssResult();
  /*package*/ final ConceptDescriptor myConceptGlossaryChunk = createDescriptorForGlossaryChunk();
  /*package*/ final ConceptDescriptor myConceptGlossaryDocSection = createDescriptorForGlossaryDocSection();
  /*package*/ final ConceptDescriptor myConceptGlossaryTerm = createDescriptorForGlossaryTerm();
  /*package*/ final ConceptDescriptor myConceptSynonymAttribute = createDescriptorForSynonymAttribute();
  /*package*/ final ConceptDescriptor myConceptTermAttribute = createDescriptorForTermAttribute();
  /*package*/ final ConceptDescriptor myConceptTermRefTermAttribute = createDescriptorForTermRefTermAttribute();
  /*package*/ final ConceptDescriptor myConceptTermRefWord = createDescriptorForTermRefWord();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptAliasAttribute.getId(), 0);
    myIndexMap.put(myConceptAlternateText.getId(), 1);
    myIndexMap.put(myConceptFindGlossaryRefAssQuery.getId(), 2);
    myIndexMap.put(myConceptFoundWordAssResult.getId(), 3);
    myIndexMap.put(myConceptGlossaryChunk.getId(), 4);
    myIndexMap.put(myConceptGlossaryDocSection.getId(), 5);
    myIndexMap.put(myConceptGlossaryTerm.getId(), 6);
    myIndexMap.put(myConceptSynonymAttribute.getId(), 7);
    myIndexMap.put(myConceptTermAttribute.getId(), 8);
    myIndexMap.put(myConceptTermRefTermAttribute.getId(), 9);
    myIndexMap.put(myConceptTermRefWord.getId(), 10);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAliasAttribute, myConceptAlternateText, myConceptFindGlossaryRefAssQuery, myConceptFoundWordAssResult, myConceptGlossaryChunk, myConceptGlossaryDocSection, myConceptGlossaryTerm, myConceptSynonymAttribute, myConceptTermAttribute, myConceptTermRefTermAttribute, myConceptTermRefWord);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptAliasAttribute;
      case 1:
        return myConceptAlternateText;
      case 2:
        return myConceptFindGlossaryRefAssQuery;
      case 3:
        return myConceptFoundWordAssResult;
      case 4:
        return myConceptGlossaryChunk;
      case 5:
        return myConceptGlossaryDocSection;
      case 6:
        return myConceptGlossaryTerm;
      case 7:
        return myConceptSynonymAttribute;
      case 8:
        return myConceptTermAttribute;
      case 9:
        return myConceptTermRefTermAttribute;
      case 10:
        return myConceptTermRefWord;
      default:
        throw new IllegalStateException();
    }
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    Integer res = null;
    if (c instanceof SConceptAdapterById) {
      res = myIndexMap.get(((SConceptAdapterById) c).getId());
    } else if (c instanceof SInterfaceConceptAdapterById) {
      res = myIndexMap.get(((SInterfaceConceptAdapterById) c).getId());
    }
    return (res == null ? -1 : res);
  }

  private static ConceptDescriptor createDescriptorForAliasAttribute() {
    return new ConceptDescriptorBuilder("org.iets3.glossary.structure.AliasAttribute", MetaIdFactory.conceptId(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x5590f4c1f3fcfd2L)).super_("org.iets3.glossary.structure.TermAttribute").version(1).super_(MetaIdFactory.conceptId(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d895caL)).parents("org.iets3.glossary.structure.TermAttribute").parentIds(MetaIdFactory.conceptId(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d895caL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x5590f4c1f3fcfd3L, "aliasText", new SNodePointer("r:7f8b53fb-2dfc-4e51-940a-0573ffa4389c(org.iets3.glossary.structure)", "385356062733094867"))).properties("aliasText").alias("alias", "").sourceNode(new SNodePointer("r:7f8b53fb-2dfc-4e51-940a-0573ffa4389c(org.iets3.glossary.structure)", "385356062733094866")).create();
  }
  private static ConceptDescriptor createDescriptorForAlternateText() {
    return new ConceptDescriptorBuilder("org.iets3.glossary.structure.AlternateText", MetaIdFactory.conceptId(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d8f6b7L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x68caade118d8f6bbL, "text", new SNodePointer("r:7f8b53fb-2dfc-4e51-940a-0573ffa4389c(org.iets3.glossary.structure)", "7551038907536176827"))).properties("text").sourceNode(new SNodePointer("r:7f8b53fb-2dfc-4e51-940a-0573ffa4389c(org.iets3.glossary.structure)", "7551038907536176823")).create();
  }
  private static ConceptDescriptor createDescriptorForFindGlossaryRefAssQuery() {
    return new ConceptDescriptorBuilder("org.iets3.glossary.structure.FindGlossaryRefAssQuery", MetaIdFactory.conceptId(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118e23efdL)).super_("com.mbeddr.core.base.structure.AssessmentQuery").version(1).super_(MetaIdFactory.conceptId(0xd4280a54f6df4383L, 0xaa41d1b2bffa7eb1L, 0xc022423d582911bL)).parents("com.mbeddr.core.base.structure.AssessmentQuery").parentIds(MetaIdFactory.conceptId(0xd4280a54f6df4383L, 0xaa41d1b2bffa7eb1L, 0xc022423d582911bL)).alias("find glossary words", "").sourceNode(new SNodePointer("r:7f8b53fb-2dfc-4e51-940a-0573ffa4389c(org.iets3.glossary.structure)", "7551038907536785149")).create();
  }
  private static ConceptDescriptor createDescriptorForFoundWordAssResult() {
    return new ConceptDescriptorBuilder("org.iets3.glossary.structure.FoundWordAssResult", MetaIdFactory.conceptId(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118e2528cL)).super_("com.mbeddr.core.base.structure.AssessmentResult").version(1).super_(MetaIdFactory.conceptId(0xd4280a54f6df4383L, 0xaa41d1b2bffa7eb1L, 0xc022423d582d809L)).parents("com.mbeddr.core.base.structure.AssessmentResult").parentIds(MetaIdFactory.conceptId(0xd4280a54f6df4383L, 0xaa41d1b2bffa7eb1L, 0xc022423d582d809L)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x68caade118e252e3L, "position", new SNodePointer("r:7f8b53fb-2dfc-4e51-940a-0573ffa4389c(org.iets3.glossary.structure)", "7551038907536790243")), new ConceptDescriptorBuilder.Prop(0x5590f4c1f40859dL, "foundAlias", new SNodePointer("r:7f8b53fb-2dfc-4e51-940a-0573ffa4389c(org.iets3.glossary.structure)", "385356062733141405"))).properties("position", "foundAlias").referenceDescriptors(new ConceptDescriptorBuilder.Ref(0x68caade118e26f6bL, "term", MetaIdFactory.conceptId(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d74a57L), false, new SNodePointer("r:7f8b53fb-2dfc-4e51-940a-0573ffa4389c(org.iets3.glossary.structure)", "7551038907536797547")), new ConceptDescriptorBuilder.Ref(0x68caade118e252e1L, "word", MetaIdFactory.conceptId(0x92d2ea165a424fdfL, 0xa676c7604efe3504L, 0x237c8da86a9f2e0cL), false, new SNodePointer("r:7f8b53fb-2dfc-4e51-940a-0573ffa4389c(org.iets3.glossary.structure)", "7551038907536790241"))).references("term", "word").sourceNode(new SNodePointer("r:7f8b53fb-2dfc-4e51-940a-0573ffa4389c(org.iets3.glossary.structure)", "7551038907536790156")).create();
  }
  private static ConceptDescriptor createDescriptorForGlossaryChunk() {
    return new ConceptDescriptorBuilder("org.iets3.glossary.structure.GlossaryChunk", MetaIdFactory.conceptId(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d74a56L)).super_("com.mbeddr.core.base.structure.Chunk").version(1).super_(MetaIdFactory.conceptId(0xd4280a54f6df4383L, 0xaa41d1b2bffa7eb1L, 0x6315bcc6effb4ea6L)).parents("com.mbeddr.core.base.structure.Chunk", "org.iets3.core.base.structure.IValidNamedConcept").parentIds(MetaIdFactory.conceptId(0xd4280a54f6df4383L, 0xaa41d1b2bffa7eb1L, 0x6315bcc6effb4ea6L), MetaIdFactory.conceptId(0x7b68d745a7b848b9L, 0xbd9c05c0f8725a35L, 0x32f64a31a179034L)).childDescriptors(new ConceptDescriptorBuilder.Link(0x68caade118d74a58L, "terms", MetaIdFactory.conceptId(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d74a57L), true, true, false, new SNodePointer("r:7f8b53fb-2dfc-4e51-940a-0573ffa4389c(org.iets3.glossary.structure)", "7551038907536067160"))).children(new String[]{"terms"}, new boolean[]{true}).rootable().sourceNode(new SNodePointer("r:7f8b53fb-2dfc-4e51-940a-0573ffa4389c(org.iets3.glossary.structure)", "7551038907536067158")).create();
  }
  private static ConceptDescriptor createDescriptorForGlossaryDocSection() {
    return new ConceptDescriptorBuilder("org.iets3.glossary.structure.GlossaryDocSection", MetaIdFactory.conceptId(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d75fb2L)).super_("com.mbeddr.doc.structure.AbstractSection").version(1).super_(MetaIdFactory.conceptId(0x2374bc907e3741f1L, 0xa9c4c2e35194c36aL, 0x2e7fd03a4b7c6bdeL)).parents("com.mbeddr.doc.structure.AbstractSection", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").parentIds(MetaIdFactory.conceptId(0x2374bc907e3741f1L, 0xa9c4c2e35194c36aL, 0x2e7fd03a4b7c6bdeL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL)).sourceNode(new SNodePointer("r:7f8b53fb-2dfc-4e51-940a-0573ffa4389c(org.iets3.glossary.structure)", "7551038907536072626")).create();
  }
  private static ConceptDescriptor createDescriptorForGlossaryTerm() {
    return new ConceptDescriptorBuilder("org.iets3.glossary.structure.GlossaryTerm", MetaIdFactory.conceptId(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d74a57L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L)).childDescriptors(new ConceptDescriptorBuilder.Link(0x68caade118d766daL, "doc", MetaIdFactory.conceptId(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d75fb2L), false, false, false, new SNodePointer("r:7f8b53fb-2dfc-4e51-940a-0573ffa4389c(org.iets3.glossary.structure)", "7551038907536074458")), new ConceptDescriptorBuilder.Link(0x68caade118d895ceL, "attrs", MetaIdFactory.conceptId(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d895caL), true, true, false, new SNodePointer("r:7f8b53fb-2dfc-4e51-940a-0573ffa4389c(org.iets3.glossary.structure)", "7551038907536152014"))).children(new String[]{"doc", "attrs"}, new boolean[]{false, true}).sourceNode(new SNodePointer("r:7f8b53fb-2dfc-4e51-940a-0573ffa4389c(org.iets3.glossary.structure)", "7551038907536067159")).create();
  }
  private static ConceptDescriptor createDescriptorForSynonymAttribute() {
    return new ConceptDescriptorBuilder("org.iets3.glossary.structure.SynonymAttribute", MetaIdFactory.conceptId(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118e05c20L)).super_("org.iets3.glossary.structure.TermRefTermAttribute").version(1).super_(MetaIdFactory.conceptId(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118e05b79L)).parents("org.iets3.glossary.structure.TermRefTermAttribute").parentIds(MetaIdFactory.conceptId(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118e05b79L)).alias("synonym", "").sourceNode(new SNodePointer("r:7f8b53fb-2dfc-4e51-940a-0573ffa4389c(org.iets3.glossary.structure)", "7551038907536661536")).create();
  }
  private static ConceptDescriptor createDescriptorForTermAttribute() {
    return new ConceptDescriptorBuilder("org.iets3.glossary.structure.TermAttribute", MetaIdFactory.conceptId(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d895caL)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).abstract_().sourceNode(new SNodePointer("r:7f8b53fb-2dfc-4e51-940a-0573ffa4389c(org.iets3.glossary.structure)", "7551038907536152010")).create();
  }
  private static ConceptDescriptor createDescriptorForTermRefTermAttribute() {
    return new ConceptDescriptorBuilder("org.iets3.glossary.structure.TermRefTermAttribute", MetaIdFactory.conceptId(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118e05b79L)).super_("org.iets3.glossary.structure.TermAttribute").version(1).super_(MetaIdFactory.conceptId(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d895caL)).parents("org.iets3.glossary.structure.TermAttribute").parentIds(MetaIdFactory.conceptId(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d895caL)).referenceDescriptors(new ConceptDescriptorBuilder.Ref(0x68caade118e05b7aL, "term", MetaIdFactory.conceptId(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d74a57L), false, new SNodePointer("r:7f8b53fb-2dfc-4e51-940a-0573ffa4389c(org.iets3.glossary.structure)", "7551038907536661370"))).references("term").abstract_().sourceNode(new SNodePointer("r:7f8b53fb-2dfc-4e51-940a-0573ffa4389c(org.iets3.glossary.structure)", "7551038907536661369")).create();
  }
  private static ConceptDescriptor createDescriptorForTermRefWord() {
    return new ConceptDescriptorBuilder("org.iets3.glossary.structure.TermRefWord", MetaIdFactory.conceptId(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d8d73cL)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "de.slisson.mps.richtext.structure.IWord").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0x92d2ea165a424fdfL, 0xa676c7604efe3504L, 0x237c8da86a9e7aecL)).referenceDescriptors(new ConceptDescriptorBuilder.Ref(0x68caade118d8d742L, "term", MetaIdFactory.conceptId(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d74a57L), false, new SNodePointer("r:7f8b53fb-2dfc-4e51-940a-0573ffa4389c(org.iets3.glossary.structure)", "7551038907536168770"))).references("term").childDescriptors(new ConceptDescriptorBuilder.Link(0x68caade118d8f78cL, "alternate", MetaIdFactory.conceptId(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d8f6b7L), true, false, false, new SNodePointer("r:7f8b53fb-2dfc-4e51-940a-0573ffa4389c(org.iets3.glossary.structure)", "7551038907536177036"))).children(new String[]{"alternate"}, new boolean[]{false}).alias("[", "").sourceNode(new SNodePointer("r:7f8b53fb-2dfc-4e51-940a-0573ffa4389c(org.iets3.glossary.structure)", "7551038907536168764")).create();
  }
}

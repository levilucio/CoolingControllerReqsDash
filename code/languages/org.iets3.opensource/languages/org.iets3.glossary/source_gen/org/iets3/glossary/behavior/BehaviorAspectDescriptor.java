package org.iets3.glossary.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myGlossaryChunk__BehaviorDescriptor = new GlossaryChunk__BehaviorDescriptor();
  private final BHDescriptor myGlossaryTerm__BehaviorDescriptor = new GlossaryTerm__BehaviorDescriptor();
  private final BHDescriptor myTermRefTermAttribute__BehaviorDescriptor = new TermRefTermAttribute__BehaviorDescriptor();
  private final BHDescriptor mySynonymAttribute__BehaviorDescriptor = new SynonymAttribute__BehaviorDescriptor();
  private final BHDescriptor myFindGlossaryRefAssQuery__BehaviorDescriptor = new FindGlossaryRefAssQuery__BehaviorDescriptor();
  private final BHDescriptor myFoundWordAssResult__BehaviorDescriptor = new FoundWordAssResult__BehaviorDescriptor();

  public BehaviorAspectDescriptor() {
  }

  @Nullable
  public BHDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    {
      SAbstractConcept cncpt = concept;
      Integer preIndex = indices_846f5o_a0j.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return myFindGlossaryRefAssQuery__BehaviorDescriptor;
          }
          break;
        case 1:
          if (true) {
            return myFoundWordAssResult__BehaviorDescriptor;
          }
          break;
        case 2:
          if (true) {
            return myGlossaryChunk__BehaviorDescriptor;
          }
          break;
        case 3:
          if (true) {
            return myGlossaryTerm__BehaviorDescriptor;
          }
          break;
        case 4:
          if (true) {
            return mySynonymAttribute__BehaviorDescriptor;
          }
          break;
        case 5:
          if (true) {
            return myTermRefTermAttribute__BehaviorDescriptor;
          }
          break;
        default:
          // default 
      }
    }
    return null;
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_846f5o_a0j = buildConceptIndices(MetaAdapterFactory.getConcept(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118e23efdL, "org.iets3.glossary.structure.FindGlossaryRefAssQuery"), MetaAdapterFactory.getConcept(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118e2528cL, "org.iets3.glossary.structure.FoundWordAssResult"), MetaAdapterFactory.getConcept(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d74a56L, "org.iets3.glossary.structure.GlossaryChunk"), MetaAdapterFactory.getConcept(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d74a57L, "org.iets3.glossary.structure.GlossaryTerm"), MetaAdapterFactory.getConcept(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118e05c20L, "org.iets3.glossary.structure.SynonymAttribute"), MetaAdapterFactory.getConcept(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118e05b79L, "org.iets3.glossary.structure.TermRefTermAttribute"));
}

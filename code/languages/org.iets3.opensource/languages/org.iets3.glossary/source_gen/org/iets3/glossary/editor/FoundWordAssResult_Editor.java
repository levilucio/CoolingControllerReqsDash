package org.iets3.glossary.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Component;
import javax.swing.JComponent;
import com.mbeddr.core.base.editor.CommandButton;
import org.iets3.glossary.behavior.FoundWordAssResult__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.nodeEditor.EditorSettings;
import jetbrains.mps.nodeEditor.cells.EditorCell_Indent;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.RefCellCellProvider;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.nodeEditor.InlineCellProvider;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.nodeEditor.cells.EditorCell_Property;
import jetbrains.mps.nodeEditor.cells.ModelAccessor;
import de.slisson.mps.richtext.behavior.Word__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.util.EqualUtil;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.cells.EmptyCellAction;

public class FoundWordAssResult_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_rxi5ot_a(editorContext, node);
  }
  private EditorCell createCollection_rxi5ot_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_rxi5ot_a");
    editorCell.setBig(true);
    editorCell.addEditorCell(this.createJComponent_rxi5ot_a0(editorContext, node));
    editorCell.addEditorCell(this.createIndentCell_rxi5ot_b0(editorContext, node));
    editorCell.addEditorCell(this.createRefCell_rxi5ot_c0(editorContext, node));
    if (renderingCondition_rxi5ot_a3a(node, editorContext)) {
      editorCell.addEditorCell(this.createCollection_rxi5ot_d0(editorContext, node));
    }
    editorCell.addEditorCell(this.createIndentCell_rxi5ot_e0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_rxi5ot_f0(editorContext, node));
    editorCell.addEditorCell(this.createIndentCell_rxi5ot_g0(editorContext, node));
    editorCell.addEditorCell(this.createReadOnlyModelAccessor_rxi5ot_h0(editorContext, node));
    return editorCell;
  }
  private EditorCell createJComponent_rxi5ot_a0(EditorContext editorContext, SNode node) {
    EditorCell editorCell = EditorCell_Component.createComponentCell(editorContext, node, FoundWordAssResult_Editor._QueryFunction_JComponent_rxi5ot_a0a(node, editorContext), "_rxi5ot_a0");
    editorCell.setCellId("JComponent_rxi5ot_a0");
    return editorCell;
  }
  private static JComponent _QueryFunction_JComponent_rxi5ot_a0a(final SNode node, final EditorContext editorContext) {
    return new CommandButton() {
      public void perform(SNode nd) {
        FoundWordAssResult__BehaviorDescriptor.replace_id6zaFu4oTy25.invoke(SNodeOperations.cast(nd, MetaAdapterFactory.getConcept(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118e2528cL, "org.iets3.glossary.structure.FoundWordAssResult")));
      }
    }.create(node, "Replace", EditorSettings.getInstance().getFontSize() / 2);
  }
  private EditorCell createIndentCell_rxi5ot_b0(EditorContext editorContext, SNode node) {
    EditorCell_Indent editorCell = new EditorCell_Indent(editorContext, node);
    return editorCell;
  }
  private EditorCell createRefCell_rxi5ot_c0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new RefCellCellProvider(node, editorContext);
    provider.setRole("term");
    provider.setNoTargetText("<no term>");
    EditorCell editorCell;
    provider.setAuxiliaryCellProvider(new FoundWordAssResult_Editor._Inline_rxi5ot_a2a());
    editorCell = provider.createEditorCell(editorContext);
    if (editorCell.getRole() == null) {
      editorCell.setReferenceCell(true);
      editorCell.setRole("term");
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, provider.getRoleAttributeKind(), editorCell);
    } else
    return editorCell;
  }
  public static class _Inline_rxi5ot_a2a extends InlineCellProvider {
    public _Inline_rxi5ot_a2a() {
      super();
    }
    public EditorCell createEditorCell(EditorContext editorContext) {
      return this.createEditorCell(editorContext, this.getSNode());
    }
    public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
      return this.createProperty_rxi5ot_a0c0(editorContext, node);
    }
    private EditorCell createProperty_rxi5ot_a0c0(EditorContext editorContext, SNode node) {
      CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
      provider.setRole("name");
      provider.setNoTargetText("<no name>");
      provider.setReadOnly(true);
      EditorCell editorCell;
      editorCell = provider.createEditorCell(editorContext);
      editorCell.setCellId("property_name");
      Style style = new StyleImpl();
      {
        Style styleToPut = new StyleImpl();
        glossary_StyleSheet.apply_term(styleToPut, editorCell);
        style.putAll(styleToPut, 0);
      }
      editorCell.getStyle().putAll(style);
      editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
      SNode attributeConcept = provider.getRoleAttribute();
      if (attributeConcept != null) {
        EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
        return manager.createNodeRoleAttributeCell(attributeConcept, provider.getRoleAttributeKind(), editorCell);
      } else
      return editorCell;
    }
  }
  private EditorCell createCollection_rxi5ot_d0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_rxi5ot_d0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createConstant_rxi5ot_a3a(editorContext, node));
    editorCell.addEditorCell(this.createProperty_rxi5ot_b3a(editorContext, node));
    return editorCell;
  }
  private static boolean renderingCondition_rxi5ot_a3a(SNode node, EditorContext editorContext) {
    return isNotEmptyString(SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118e2528cL, 0x5590f4c1f40859dL, "foundAlias")));
  }
  private EditorCell createConstant_rxi5ot_a3a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "/");
    editorCell.setCellId("Constant_rxi5ot_a3a");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createProperty_rxi5ot_b3a(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("foundAlias");
    provider.setNoTargetText("<no foundAlias>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_foundAlias");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, provider.getRoleAttributeKind(), editorCell);
    } else
    return editorCell;
  }
  private EditorCell createIndentCell_rxi5ot_e0(EditorContext editorContext, SNode node) {
    EditorCell_Indent editorCell = new EditorCell_Indent(editorContext, node);
    return editorCell;
  }
  private EditorCell createConstant_rxi5ot_f0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "|");
    editorCell.setCellId("Constant_rxi5ot_f0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createIndentCell_rxi5ot_g0(EditorContext editorContext, SNode node) {
    EditorCell_Indent editorCell = new EditorCell_Indent(editorContext, node);
    return editorCell;
  }
  private EditorCell createReadOnlyModelAccessor_rxi5ot_h0(final EditorContext editorContext, final SNode node) {
    EditorCell_Property editorCell = EditorCell_Property.create(editorContext, new ModelAccessor() {
      public String getText() {
        String t = Word__BehaviorDescriptor.getText_idehGfXvI_DB.invoke(SLinkOperations.getTarget(node, MetaAdapterFactory.getReferenceLink(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118e2528cL, 0x68caade118e252e1L, "word")));
        int b = SPropertyOperations.getInteger(node, MetaAdapterFactory.getProperty(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118e2528cL, 0x68caade118e252e3L, "position")) - 30;
        int e = SPropertyOperations.getInteger(node, MetaAdapterFactory.getProperty(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118e2528cL, 0x68caade118e252e3L, "position")) + 40;
        if (b < 0) {
          b = 0;
        }
        if (e > t.length()) {
          e = t.length();
        }
        return trim_rxi5ot_a0f0a0a1a0a0o(t.substring(b, e));
      }
      public void setText(String s) {
      }
      public boolean isValidText(String s) {
        return EqualUtil.equals(s, getText());
      }
    }, node);
    editorCell.setAction(CellActionType.DELETE, EmptyCellAction.getInstance());
    editorCell.setAction(CellActionType.BACKSPACE, EmptyCellAction.getInstance());
    editorCell.setCellId("ReadOnlyModelAccessor_rxi5ot_h0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.NAVIGATABLE_NODE, 0, FoundWordAssResult_Editor._StyleParameter_QueryFunction_rxi5ot_a0h0(editorContext, node));
    editorCell.getStyle().putAll(style);
    return editorCell;
  }
  private static SNode _StyleParameter_QueryFunction_rxi5ot_a0h0(EditorContext editorContext, SNode node) {
    return SNodeOperations.cast(SNodeOperations.getParent(SLinkOperations.getTarget(node, MetaAdapterFactory.getReferenceLink(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118e2528cL, 0x68caade118e252e1L, "word"))), MetaAdapterFactory.getConcept(0x92d2ea165a424fdfL, 0xa676c7604efe3504L, 0x237c8da86a9e4e61L, "de.slisson.mps.richtext.structure.Text"));
  }
  private static boolean isNotEmptyString(String str) {
    return str != null && str.length() > 0;
  }
  public static String trim_rxi5ot_a0f0a0a1a0a0o(String str) {
    return (str == null ? null : str.trim());
  }
}

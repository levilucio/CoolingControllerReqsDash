package org.iets3.glossary.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import java.util.Arrays;
import jetbrains.mps.openapi.editor.descriptor.TransformationMenu;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    {
      SAbstractConcept cncpt = ((SAbstractConcept) concept);
      Integer preIndex = indices_xbvbvu_a0a.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new AliasAttribute_Editor());
          }
          break;
        case 1:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new AlternateText_Editor());
          }
          break;
        case 2:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new FindGlossaryRefAssQuery_Editor());
          }
          break;
        case 3:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new FoundWordAssResult_Editor());
          }
          break;
        case 4:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new GlossaryChunk_Editor());
          }
          break;
        case 5:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new GlossaryDocSection_Editor());
          }
          break;
        case 6:
          if (true) {
            return Arrays.asList(new ConceptEditor[]{new GlossaryTerm_Editor(), new GlossaryTerm_presentationMode_Editor()});
          }
          break;
        case 7:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new TermRefTermAttribute_Editor());
          }
          break;
        case 8:
          if (true) {
            return Arrays.asList(new ConceptEditor[]{new TermRefWord_Editor(), new TermRefWord_presentationMode_Editor()});
          }
          break;
        default:
      }
    }
    return Collections.<ConceptEditor>emptyList();
  }


  @NotNull
  @Override
  public Collection<TransformationMenu> getDeclaredDefaultTransformationMenus(SAbstractConcept concept) {
    {
      SAbstractConcept cncpt = concept;
      Integer preIndex = indices_xbvbvu_a0d.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return Collections.<TransformationMenu>singletonList(new template_GrammarCellsSideTransformationsMenu());
          }
          break;
        default:
      }
    }
    return Collections.<TransformationMenu>emptyList();
  }
  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    {
      SAbstractConcept cncpt = concept;
      Integer preIndex = indices_xbvbvu_a0e.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_AliasAttribute());
          }
          break;
        case 1:
          if (true) {
            return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_AlternateText());
          }
          break;
        case 2:
          if (true) {
            return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_FindGlossaryRefAssQuery());
          }
          break;
        case 3:
          if (true) {
            return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_FoundWordAssResult());
          }
          break;
        case 4:
          if (true) {
            return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_GlossaryChunk());
          }
          break;
        case 5:
          if (true) {
            return Arrays.asList(new SubstituteMenu[]{new GlossaryDocSection_SubstituteMenu(), new GrammarCellsSubstituteMenu_GlossaryDocSection()});
          }
          break;
        case 6:
          if (true) {
            return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_GlossaryTerm());
          }
          break;
        case 7:
          if (true) {
            return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_SynonymAttribute());
          }
          break;
        case 8:
          if (true) {
            return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_TermAttribute());
          }
          break;
        case 9:
          if (true) {
            return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_TermRefTermAttribute());
          }
          break;
        case 10:
          if (true) {
            return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_TermRefWord());
          }
          break;
        default:
      }
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_xbvbvu_a0a = buildConceptIndices(MetaAdapterFactory.getConcept(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x5590f4c1f3fcfd2L, "org.iets3.glossary.structure.AliasAttribute"), MetaAdapterFactory.getConcept(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d8f6b7L, "org.iets3.glossary.structure.AlternateText"), MetaAdapterFactory.getConcept(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118e23efdL, "org.iets3.glossary.structure.FindGlossaryRefAssQuery"), MetaAdapterFactory.getConcept(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118e2528cL, "org.iets3.glossary.structure.FoundWordAssResult"), MetaAdapterFactory.getConcept(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d74a56L, "org.iets3.glossary.structure.GlossaryChunk"), MetaAdapterFactory.getConcept(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d75fb2L, "org.iets3.glossary.structure.GlossaryDocSection"), MetaAdapterFactory.getConcept(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d74a57L, "org.iets3.glossary.structure.GlossaryTerm"), MetaAdapterFactory.getConcept(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118e05b79L, "org.iets3.glossary.structure.TermRefTermAttribute"), MetaAdapterFactory.getConcept(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d8d73cL, "org.iets3.glossary.structure.TermRefWord"));
  private static final Map<SAbstractConcept, Integer> indices_xbvbvu_a0d = buildConceptIndices(MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, "jetbrains.mps.lang.core.structure.BaseConcept"));
  private static final Map<SAbstractConcept, Integer> indices_xbvbvu_a0e = buildConceptIndices(MetaAdapterFactory.getConcept(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x5590f4c1f3fcfd2L, "org.iets3.glossary.structure.AliasAttribute"), MetaAdapterFactory.getConcept(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d8f6b7L, "org.iets3.glossary.structure.AlternateText"), MetaAdapterFactory.getConcept(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118e23efdL, "org.iets3.glossary.structure.FindGlossaryRefAssQuery"), MetaAdapterFactory.getConcept(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118e2528cL, "org.iets3.glossary.structure.FoundWordAssResult"), MetaAdapterFactory.getConcept(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d74a56L, "org.iets3.glossary.structure.GlossaryChunk"), MetaAdapterFactory.getConcept(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d75fb2L, "org.iets3.glossary.structure.GlossaryDocSection"), MetaAdapterFactory.getConcept(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d74a57L, "org.iets3.glossary.structure.GlossaryTerm"), MetaAdapterFactory.getConcept(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118e05c20L, "org.iets3.glossary.structure.SynonymAttribute"), MetaAdapterFactory.getConcept(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d895caL, "org.iets3.glossary.structure.TermAttribute"), MetaAdapterFactory.getConcept(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118e05b79L, "org.iets3.glossary.structure.TermRefTermAttribute"), MetaAdapterFactory.getConcept(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d8d73cL, "org.iets3.glossary.structure.TermRefWord"));
}

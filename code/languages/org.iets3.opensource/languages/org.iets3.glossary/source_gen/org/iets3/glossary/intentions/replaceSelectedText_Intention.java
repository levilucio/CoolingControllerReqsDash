package org.iets3.glossary.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionDescriptorBase;
import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.intentions.IntentionType;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import org.iets3.glossary.behavior.TermRefHelper;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.Collections;
import jetbrains.mps.intentions.IntentionExecutableBase;
import de.slisson.mps.richtext.behavior.Word__BehaviorDescriptor;
import jetbrains.mps.intentions.IntentionDescriptor;

public final class replaceSelectedText_Intention extends IntentionDescriptorBase implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public replaceSelectedText_Intention() {
    super(MetaAdapterFactory.getConcept(0x92d2ea165a424fdfL, 0xa676c7604efe3504L, 0x237c8da86a9f2e0cL, "de.slisson.mps.richtext.structure.Word"), IntentionType.NORMAL, false, new SNodePointer("r:5b2134ac-f5b3-4ed9-b4f7-14b15307c9c7(org.iets3.glossary.intentions)", "385356062733309412"));
  }
  @Override
  public String getPresentation() {
    return "replaceSelectedText";
  }
  @Override
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }
  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    if (!(TermRefHelper.isCorrectSelection(editorContext))) {
      return false;
    }
    String text = TermRefHelper.getText(editorContext);
    List<SNode> terms = SModelOperations.nodesIncludingImported(SNodeOperations.getModel(node), MetaAdapterFactory.getConcept(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d74a57L, "org.iets3.glossary.structure.GlossaryTerm"));
    for (SNode t : ListSequence.fromList(terms)) {
      if (text.equals(SPropertyOperations.getString(t, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")))) {
        return true;
      }
    }
    return false;
  }
  @Override
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new replaceSelectedText_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends IntentionExecutableBase {
    public IntentionImplementation() {
    }
    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "GLOSSARY: " + ("Replace with Reference to Glossary Term");
    }
    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      List<SNode> terms = SModelOperations.nodesIncludingImported(SNodeOperations.getModel(node), MetaAdapterFactory.getConcept(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d74a57L, "org.iets3.glossary.structure.GlossaryTerm"));
      String st = Word__BehaviorDescriptor.getSelectedText_idlp3OKvgJt4.invoke(node, editorContext);
      for (SNode t : ListSequence.fromList(terms)) {
        if (st.equals(SPropertyOperations.getString(t, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")))) {
          TermRefHelper.performReplace(editorContext, t);
        }
      }
    }
    @Override
    public IntentionDescriptor getDescriptor() {
      return replaceSelectedText_Intention.this;
    }
  }
}

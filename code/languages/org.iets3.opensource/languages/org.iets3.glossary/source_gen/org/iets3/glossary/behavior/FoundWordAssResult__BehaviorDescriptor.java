package org.iets3.glossary.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import de.slisson.mps.richtext.behavior.Word__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;

public final class FoundWordAssResult__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118e2528cL, "org.iets3.glossary.structure.FoundWordAssResult");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<String> uniqueIdentifier_idK292flwHwe = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("uniqueIdentifier").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("K292flwHwe").registry(REGISTRY).build();
  public static final SMethod<Void> updateValues_id5L$H31Kf5$y = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("updateValues").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("5L$H31Kf5$y").registry(REGISTRY).build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<Void> replace_id6zaFu4oTy25 = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("replace").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6zaFu4oTy25").registry(REGISTRY).build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(uniqueIdentifier_idK292flwHwe, updateValues_id5L$H31Kf5$y, replace_id6zaFu4oTy25);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static String uniqueIdentifier_idK292flwHwe(@NotNull SNode __thisNode__) {
    return SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getReferenceLink(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118e2528cL, 0x68caade118e252e1L, "word")).getNodeId().toString();
  }
  /*package*/ static void updateValues_id5L$H31Kf5$y(@NotNull SNode __thisNode__, SNode updatedResult) {
  }
  /*package*/ static void replace_id6zaFu4oTy25(@NotNull SNode __thisNode__) {
    List<SNode> words = new ArrayList<SNode>();
    SNode w = createTermRefWord_qgbxnj_a0b0c(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getReferenceLink(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118e2528cL, 0x68caade118e26f6bL, "term")));
    ListSequence.fromList(words).addElement(w);
    Word__BehaviorDescriptor.insertNodesAt_id4WdkpBdiPQf.invoke(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getReferenceLink(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118e2528cL, 0x68caade118e252e1L, "word")), words, ((int) SPropertyOperations.getInteger(__thisNode__, MetaAdapterFactory.getProperty(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118e2528cL, 0x68caade118e252e3L, "position"))));
    SNode next = SNodeOperations.cast(SNodeOperations.getNextSibling(w), MetaAdapterFactory.getConcept(0x92d2ea165a424fdfL, 0xa676c7604efe3504L, 0x237c8da86a9f2e0cL, "de.slisson.mps.richtext.structure.Word"));
    if (isNotEmptyString(SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118e2528cL, 0x5590f4c1f40859dL, "foundAlias")))) {
      Word__BehaviorDescriptor.setText_id1JwC6U7zkKz.invoke(next, Word__BehaviorDescriptor.getText_idehGfXvI_DB.invoke(next).substring(SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118e2528cL, 0x5590f4c1f40859dL, "foundAlias")).length()));
      SNode alt = SLinkOperations.setNewChild(w, MetaAdapterFactory.getContainmentLink(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d8d73cL, 0x68caade118d8f78cL, "alternate"), MetaAdapterFactory.getConcept(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d8f6b7L, "org.iets3.glossary.structure.AlternateText"));
      SPropertyOperations.set(alt, MetaAdapterFactory.getProperty(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d8f6b7L, 0x68caade118d8f6bbL, "text"), SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118e2528cL, 0x5590f4c1f40859dL, "foundAlias")));
    } else {
      Word__BehaviorDescriptor.setText_id1JwC6U7zkKz.invoke(next, Word__BehaviorDescriptor.getText_idehGfXvI_DB.invoke(next).substring(SPropertyOperations.getString(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getReferenceLink(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118e2528cL, 0x68caade118e26f6bL, "term")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")).length()));
    }
    SNodeOperations.deleteNode(SNodeOperations.getParent(__thisNode__));
  }

  /*package*/ FoundWordAssResult__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((String) uniqueIdentifier_idK292flwHwe(node));
      case 1:
        updateValues_id5L$H31Kf5$y(node, (SNode) parameters[0]);
        return null;
      case 2:
        replace_id6zaFu4oTy25(node);
        return null;
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
  private static SNode createTermRefWord_qgbxnj_a0b0c(Object p0) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode n1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d8d73cL, "org.iets3.glossary.structure.TermRefWord"), null, null, false);
    n1.setReferenceTarget(MetaAdapterFactory.getReferenceLink(0x8e4e17debc104a34L, 0xa376a243fbde540eL, 0x68caade118d8d73cL, 0x68caade118d8d742L, "term"), (SNode) p0);
    return n1;
  }
  private static boolean isNotEmptyString(String str) {
    return str != null && str.length() > 0;
  }
}
